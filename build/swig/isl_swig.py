# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_isl_swig', [dirname(__file__)])
        except ImportError:
            import _isl_swig
            return _isl_swig
        if fp is not None:
            try:
                _mod = imp.load_module('_isl_swig', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _isl_swig = swig_import_helper()
    del swig_import_helper
else:
    import _isl_swig
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr



def high_res_timer_now():
    """high_res_timer_now() -> gr::high_res_timer_type"""
    return _isl_swig.high_res_timer_now()

def high_res_timer_now_perfmon():
    """high_res_timer_now_perfmon() -> gr::high_res_timer_type"""
    return _isl_swig.high_res_timer_now_perfmon()

def high_res_timer_tps():
    """high_res_timer_tps() -> gr::high_res_timer_type"""
    return _isl_swig.high_res_timer_tps()

def high_res_timer_epoch():
    """high_res_timer_epoch() -> gr::high_res_timer_type"""
    return _isl_swig.high_res_timer_epoch()
class pn_generate_i(object):
    """
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of isl::pn_generate_i.

    To avoid accidental use of raw pointers, isl::pn_generate_i's constructor is in a private implementation class. isl::pn_generate_i::make is the public interface for creating new instances.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make():
        """
        make() -> pn_generate_i_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of isl::pn_generate_i.

        To avoid accidental use of raw pointers, isl::pn_generate_i's constructor is in a private implementation class. isl::pn_generate_i::make is the public interface for creating new instances.
        """
        return _isl_swig.pn_generate_i_make()

    make = staticmethod(make)
    __swig_destroy__ = _isl_swig.delete_pn_generate_i
    __del__ = lambda self: None
pn_generate_i_swigregister = _isl_swig.pn_generate_i_swigregister
pn_generate_i_swigregister(pn_generate_i)

def pn_generate_i_make():
    """
    pn_generate_i_make() -> pn_generate_i_sptr

    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of isl::pn_generate_i.

    To avoid accidental use of raw pointers, isl::pn_generate_i's constructor is in a private implementation class. isl::pn_generate_i::make is the public interface for creating new instances.
    """
    return _isl_swig.pn_generate_i_make()

class pn_generate_i_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::isl::pn_generate_i)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::isl::pn_generate_i)> self) -> pn_generate_i_sptr
        __init__(boost::shared_ptr<(gr::isl::pn_generate_i)> self, pn_generate_i p) -> pn_generate_i_sptr
        """
        this = _isl_swig.new_pn_generate_i_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(pn_generate_i_sptr self) -> pn_generate_i"""
        return _isl_swig.pn_generate_i_sptr___deref__(self)

    __swig_destroy__ = _isl_swig.delete_pn_generate_i_sptr
    __del__ = lambda self: None

    def make(self):
        """
        make(pn_generate_i_sptr self) -> pn_generate_i_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of isl::pn_generate_i.

        To avoid accidental use of raw pointers, isl::pn_generate_i's constructor is in a private implementation class. isl::pn_generate_i::make is the public interface for creating new instances.
        """
        return _isl_swig.pn_generate_i_sptr_make(self)


    def history(self):
        """history(pn_generate_i_sptr self) -> unsigned int"""
        return _isl_swig.pn_generate_i_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(pn_generate_i_sptr self, int which, int delay)
        declare_sample_delay(pn_generate_i_sptr self, unsigned int delay)
        """
        return _isl_swig.pn_generate_i_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(pn_generate_i_sptr self, int which) -> unsigned int"""
        return _isl_swig.pn_generate_i_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(pn_generate_i_sptr self) -> int"""
        return _isl_swig.pn_generate_i_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(pn_generate_i_sptr self) -> double"""
        return _isl_swig.pn_generate_i_sptr_relative_rate(self)


    def start(self):
        """start(pn_generate_i_sptr self) -> bool"""
        return _isl_swig.pn_generate_i_sptr_start(self)


    def stop(self):
        """stop(pn_generate_i_sptr self) -> bool"""
        return _isl_swig.pn_generate_i_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(pn_generate_i_sptr self, unsigned int which_input) -> uint64_t"""
        return _isl_swig.pn_generate_i_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(pn_generate_i_sptr self, unsigned int which_output) -> uint64_t"""
        return _isl_swig.pn_generate_i_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(pn_generate_i_sptr self) -> int"""
        return _isl_swig.pn_generate_i_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(pn_generate_i_sptr self, int m)"""
        return _isl_swig.pn_generate_i_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(pn_generate_i_sptr self)"""
        return _isl_swig.pn_generate_i_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(pn_generate_i_sptr self) -> bool"""
        return _isl_swig.pn_generate_i_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(pn_generate_i_sptr self, int m)"""
        return _isl_swig.pn_generate_i_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(pn_generate_i_sptr self) -> int"""
        return _isl_swig.pn_generate_i_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(pn_generate_i_sptr self, int i) -> long"""
        return _isl_swig.pn_generate_i_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(pn_generate_i_sptr self, long max_output_buffer)
        set_max_output_buffer(pn_generate_i_sptr self, int port, long max_output_buffer)
        """
        return _isl_swig.pn_generate_i_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(pn_generate_i_sptr self, int i) -> long"""
        return _isl_swig.pn_generate_i_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(pn_generate_i_sptr self, long min_output_buffer)
        set_min_output_buffer(pn_generate_i_sptr self, int port, long min_output_buffer)
        """
        return _isl_swig.pn_generate_i_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(pn_generate_i_sptr self) -> float"""
        return _isl_swig.pn_generate_i_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(pn_generate_i_sptr self) -> float"""
        return _isl_swig.pn_generate_i_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(pn_generate_i_sptr self) -> float"""
        return _isl_swig.pn_generate_i_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(pn_generate_i_sptr self) -> float"""
        return _isl_swig.pn_generate_i_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(pn_generate_i_sptr self) -> float"""
        return _isl_swig.pn_generate_i_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(pn_generate_i_sptr self) -> float"""
        return _isl_swig.pn_generate_i_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(pn_generate_i_sptr self, int which) -> float
        pc_input_buffers_full(pn_generate_i_sptr self) -> pmt_vector_float
        """
        return _isl_swig.pn_generate_i_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(pn_generate_i_sptr self, int which) -> float
        pc_input_buffers_full_avg(pn_generate_i_sptr self) -> pmt_vector_float
        """
        return _isl_swig.pn_generate_i_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(pn_generate_i_sptr self, int which) -> float
        pc_input_buffers_full_var(pn_generate_i_sptr self) -> pmt_vector_float
        """
        return _isl_swig.pn_generate_i_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(pn_generate_i_sptr self, int which) -> float
        pc_output_buffers_full(pn_generate_i_sptr self) -> pmt_vector_float
        """
        return _isl_swig.pn_generate_i_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(pn_generate_i_sptr self, int which) -> float
        pc_output_buffers_full_avg(pn_generate_i_sptr self) -> pmt_vector_float
        """
        return _isl_swig.pn_generate_i_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(pn_generate_i_sptr self, int which) -> float
        pc_output_buffers_full_var(pn_generate_i_sptr self) -> pmt_vector_float
        """
        return _isl_swig.pn_generate_i_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(pn_generate_i_sptr self) -> float"""
        return _isl_swig.pn_generate_i_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(pn_generate_i_sptr self) -> float"""
        return _isl_swig.pn_generate_i_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(pn_generate_i_sptr self) -> float"""
        return _isl_swig.pn_generate_i_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(pn_generate_i_sptr self) -> float"""
        return _isl_swig.pn_generate_i_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(pn_generate_i_sptr self) -> float"""
        return _isl_swig.pn_generate_i_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(pn_generate_i_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _isl_swig.pn_generate_i_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(pn_generate_i_sptr self)"""
        return _isl_swig.pn_generate_i_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(pn_generate_i_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _isl_swig.pn_generate_i_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(pn_generate_i_sptr self) -> int"""
        return _isl_swig.pn_generate_i_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(pn_generate_i_sptr self) -> int"""
        return _isl_swig.pn_generate_i_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(pn_generate_i_sptr self, int priority) -> int"""
        return _isl_swig.pn_generate_i_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(pn_generate_i_sptr self) -> std::string"""
        return _isl_swig.pn_generate_i_sptr_name(self)


    def symbol_name(self):
        """symbol_name(pn_generate_i_sptr self) -> std::string"""
        return _isl_swig.pn_generate_i_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(pn_generate_i_sptr self) -> io_signature_sptr"""
        return _isl_swig.pn_generate_i_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(pn_generate_i_sptr self) -> io_signature_sptr"""
        return _isl_swig.pn_generate_i_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(pn_generate_i_sptr self) -> long"""
        return _isl_swig.pn_generate_i_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(pn_generate_i_sptr self) -> basic_block_sptr"""
        return _isl_swig.pn_generate_i_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(pn_generate_i_sptr self, int ninputs, int noutputs) -> bool"""
        return _isl_swig.pn_generate_i_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(pn_generate_i_sptr self) -> std::string"""
        return _isl_swig.pn_generate_i_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(pn_generate_i_sptr self, std::string name)"""
        return _isl_swig.pn_generate_i_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(pn_generate_i_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _isl_swig.pn_generate_i_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(pn_generate_i_sptr self) -> swig_int_ptr"""
        return _isl_swig.pn_generate_i_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(pn_generate_i_sptr self) -> swig_int_ptr"""
        return _isl_swig.pn_generate_i_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(pn_generate_i_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _isl_swig.pn_generate_i_sptr_message_subscribers(self, which_port)

pn_generate_i_sptr_swigregister = _isl_swig.pn_generate_i_sptr_swigregister
pn_generate_i_sptr_swigregister(pn_generate_i_sptr)


pn_generate_i_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
pn_generate_i = pn_generate_i.make;

class pmod(object):
    """
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of isl::pmod.

    To avoid accidental use of raw pointers, isl::pmod's constructor is in a private implementation class. isl::pmod::make is the public interface for creating new instances.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make():
        """
        make() -> pmod_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of isl::pmod.

        To avoid accidental use of raw pointers, isl::pmod's constructor is in a private implementation class. isl::pmod::make is the public interface for creating new instances.
        """
        return _isl_swig.pmod_make()

    make = staticmethod(make)
    __swig_destroy__ = _isl_swig.delete_pmod
    __del__ = lambda self: None
pmod_swigregister = _isl_swig.pmod_swigregister
pmod_swigregister(pmod)

def pmod_make():
    """
    pmod_make() -> pmod_sptr

    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of isl::pmod.

    To avoid accidental use of raw pointers, isl::pmod's constructor is in a private implementation class. isl::pmod::make is the public interface for creating new instances.
    """
    return _isl_swig.pmod_make()

class pmod_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::isl::pmod)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::isl::pmod)> self) -> pmod_sptr
        __init__(boost::shared_ptr<(gr::isl::pmod)> self, pmod p) -> pmod_sptr
        """
        this = _isl_swig.new_pmod_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(pmod_sptr self) -> pmod"""
        return _isl_swig.pmod_sptr___deref__(self)

    __swig_destroy__ = _isl_swig.delete_pmod_sptr
    __del__ = lambda self: None

    def make(self):
        """
        make(pmod_sptr self) -> pmod_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of isl::pmod.

        To avoid accidental use of raw pointers, isl::pmod's constructor is in a private implementation class. isl::pmod::make is the public interface for creating new instances.
        """
        return _isl_swig.pmod_sptr_make(self)


    def history(self):
        """history(pmod_sptr self) -> unsigned int"""
        return _isl_swig.pmod_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(pmod_sptr self, int which, int delay)
        declare_sample_delay(pmod_sptr self, unsigned int delay)
        """
        return _isl_swig.pmod_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(pmod_sptr self, int which) -> unsigned int"""
        return _isl_swig.pmod_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(pmod_sptr self) -> int"""
        return _isl_swig.pmod_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(pmod_sptr self) -> double"""
        return _isl_swig.pmod_sptr_relative_rate(self)


    def start(self):
        """start(pmod_sptr self) -> bool"""
        return _isl_swig.pmod_sptr_start(self)


    def stop(self):
        """stop(pmod_sptr self) -> bool"""
        return _isl_swig.pmod_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(pmod_sptr self, unsigned int which_input) -> uint64_t"""
        return _isl_swig.pmod_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(pmod_sptr self, unsigned int which_output) -> uint64_t"""
        return _isl_swig.pmod_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(pmod_sptr self) -> int"""
        return _isl_swig.pmod_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(pmod_sptr self, int m)"""
        return _isl_swig.pmod_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(pmod_sptr self)"""
        return _isl_swig.pmod_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(pmod_sptr self) -> bool"""
        return _isl_swig.pmod_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(pmod_sptr self, int m)"""
        return _isl_swig.pmod_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(pmod_sptr self) -> int"""
        return _isl_swig.pmod_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(pmod_sptr self, int i) -> long"""
        return _isl_swig.pmod_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(pmod_sptr self, long max_output_buffer)
        set_max_output_buffer(pmod_sptr self, int port, long max_output_buffer)
        """
        return _isl_swig.pmod_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(pmod_sptr self, int i) -> long"""
        return _isl_swig.pmod_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(pmod_sptr self, long min_output_buffer)
        set_min_output_buffer(pmod_sptr self, int port, long min_output_buffer)
        """
        return _isl_swig.pmod_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(pmod_sptr self) -> float"""
        return _isl_swig.pmod_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(pmod_sptr self) -> float"""
        return _isl_swig.pmod_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(pmod_sptr self) -> float"""
        return _isl_swig.pmod_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(pmod_sptr self) -> float"""
        return _isl_swig.pmod_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(pmod_sptr self) -> float"""
        return _isl_swig.pmod_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(pmod_sptr self) -> float"""
        return _isl_swig.pmod_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(pmod_sptr self, int which) -> float
        pc_input_buffers_full(pmod_sptr self) -> pmt_vector_float
        """
        return _isl_swig.pmod_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(pmod_sptr self, int which) -> float
        pc_input_buffers_full_avg(pmod_sptr self) -> pmt_vector_float
        """
        return _isl_swig.pmod_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(pmod_sptr self, int which) -> float
        pc_input_buffers_full_var(pmod_sptr self) -> pmt_vector_float
        """
        return _isl_swig.pmod_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(pmod_sptr self, int which) -> float
        pc_output_buffers_full(pmod_sptr self) -> pmt_vector_float
        """
        return _isl_swig.pmod_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(pmod_sptr self, int which) -> float
        pc_output_buffers_full_avg(pmod_sptr self) -> pmt_vector_float
        """
        return _isl_swig.pmod_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(pmod_sptr self, int which) -> float
        pc_output_buffers_full_var(pmod_sptr self) -> pmt_vector_float
        """
        return _isl_swig.pmod_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(pmod_sptr self) -> float"""
        return _isl_swig.pmod_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(pmod_sptr self) -> float"""
        return _isl_swig.pmod_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(pmod_sptr self) -> float"""
        return _isl_swig.pmod_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(pmod_sptr self) -> float"""
        return _isl_swig.pmod_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(pmod_sptr self) -> float"""
        return _isl_swig.pmod_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(pmod_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _isl_swig.pmod_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(pmod_sptr self)"""
        return _isl_swig.pmod_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(pmod_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _isl_swig.pmod_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(pmod_sptr self) -> int"""
        return _isl_swig.pmod_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(pmod_sptr self) -> int"""
        return _isl_swig.pmod_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(pmod_sptr self, int priority) -> int"""
        return _isl_swig.pmod_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(pmod_sptr self) -> std::string"""
        return _isl_swig.pmod_sptr_name(self)


    def symbol_name(self):
        """symbol_name(pmod_sptr self) -> std::string"""
        return _isl_swig.pmod_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(pmod_sptr self) -> io_signature_sptr"""
        return _isl_swig.pmod_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(pmod_sptr self) -> io_signature_sptr"""
        return _isl_swig.pmod_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(pmod_sptr self) -> long"""
        return _isl_swig.pmod_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(pmod_sptr self) -> basic_block_sptr"""
        return _isl_swig.pmod_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(pmod_sptr self, int ninputs, int noutputs) -> bool"""
        return _isl_swig.pmod_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(pmod_sptr self) -> std::string"""
        return _isl_swig.pmod_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(pmod_sptr self, std::string name)"""
        return _isl_swig.pmod_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(pmod_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _isl_swig.pmod_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(pmod_sptr self) -> swig_int_ptr"""
        return _isl_swig.pmod_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(pmod_sptr self) -> swig_int_ptr"""
        return _isl_swig.pmod_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(pmod_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _isl_swig.pmod_sptr_message_subscribers(self, which_port)

pmod_sptr_swigregister = _isl_swig.pmod_sptr_swigregister
pmod_sptr_swigregister(pmod_sptr)


pmod_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
pmod = pmod.make;

class oqpsk_coherrent_demod(object):
    """
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of isl::oqpsk_coherrent_demod.

    To avoid accidental use of raw pointers, isl::oqpsk_coherrent_demod's constructor is in a private implementation class. isl::oqpsk_coherrent_demod::make is the public interface for creating new instances.

    Args:
        samples_per_symbol : 
        taps : 
        opt_point : 
        pll : 
        pll_loop_bw : 
        pll_damping : 
        freq_max : 
        freq_min : 
        dttl : 
        dttl_loop_bw : 
        dttl_damping : 
        max_rate_deviation : 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(samples_per_symbol, taps, opt_point, pll, pll_loop_bw, pll_damping, freq_max, freq_min, dttl, dttl_loop_bw, dttl_damping, max_rate_deviation):
        """
        make(int samples_per_symbol, pmt_vector_cfloat taps, int opt_point, int pll, float pll_loop_bw, float pll_damping, float freq_max, float freq_min, int dttl, float dttl_loop_bw, float dttl_damping, float max_rate_deviation) -> oqpsk_coherrent_demod_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of isl::oqpsk_coherrent_demod.

        To avoid accidental use of raw pointers, isl::oqpsk_coherrent_demod's constructor is in a private implementation class. isl::oqpsk_coherrent_demod::make is the public interface for creating new instances.

        Args:
            samples_per_symbol : 
            taps : 
            opt_point : 
            pll : 
            pll_loop_bw : 
            pll_damping : 
            freq_max : 
            freq_min : 
            dttl : 
            dttl_loop_bw : 
            dttl_damping : 
            max_rate_deviation : 
        """
        return _isl_swig.oqpsk_coherrent_demod_make(samples_per_symbol, taps, opt_point, pll, pll_loop_bw, pll_damping, freq_max, freq_min, dttl, dttl_loop_bw, dttl_damping, max_rate_deviation)

    make = staticmethod(make)
    __swig_destroy__ = _isl_swig.delete_oqpsk_coherrent_demod
    __del__ = lambda self: None
oqpsk_coherrent_demod_swigregister = _isl_swig.oqpsk_coherrent_demod_swigregister
oqpsk_coherrent_demod_swigregister(oqpsk_coherrent_demod)

def oqpsk_coherrent_demod_make(samples_per_symbol, taps, opt_point, pll, pll_loop_bw, pll_damping, freq_max, freq_min, dttl, dttl_loop_bw, dttl_damping, max_rate_deviation):
    """
    oqpsk_coherrent_demod_make(int samples_per_symbol, pmt_vector_cfloat taps, int opt_point, int pll, float pll_loop_bw, float pll_damping, float freq_max, float freq_min, int dttl, float dttl_loop_bw, float dttl_damping, float max_rate_deviation) -> oqpsk_coherrent_demod_sptr

    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of isl::oqpsk_coherrent_demod.

    To avoid accidental use of raw pointers, isl::oqpsk_coherrent_demod's constructor is in a private implementation class. isl::oqpsk_coherrent_demod::make is the public interface for creating new instances.

    Args:
        samples_per_symbol : 
        taps : 
        opt_point : 
        pll : 
        pll_loop_bw : 
        pll_damping : 
        freq_max : 
        freq_min : 
        dttl : 
        dttl_loop_bw : 
        dttl_damping : 
        max_rate_deviation : 
    """
    return _isl_swig.oqpsk_coherrent_demod_make(samples_per_symbol, taps, opt_point, pll, pll_loop_bw, pll_damping, freq_max, freq_min, dttl, dttl_loop_bw, dttl_damping, max_rate_deviation)

class oqpsk_coherrent_demod_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::isl::oqpsk_coherrent_demod)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::isl::oqpsk_coherrent_demod)> self) -> oqpsk_coherrent_demod_sptr
        __init__(boost::shared_ptr<(gr::isl::oqpsk_coherrent_demod)> self, oqpsk_coherrent_demod p) -> oqpsk_coherrent_demod_sptr
        """
        this = _isl_swig.new_oqpsk_coherrent_demod_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(oqpsk_coherrent_demod_sptr self) -> oqpsk_coherrent_demod"""
        return _isl_swig.oqpsk_coherrent_demod_sptr___deref__(self)

    __swig_destroy__ = _isl_swig.delete_oqpsk_coherrent_demod_sptr
    __del__ = lambda self: None

    def make(self, samples_per_symbol, taps, opt_point, pll, pll_loop_bw, pll_damping, freq_max, freq_min, dttl, dttl_loop_bw, dttl_damping, max_rate_deviation):
        """
        make(oqpsk_coherrent_demod_sptr self, int samples_per_symbol, pmt_vector_cfloat taps, int opt_point, int pll, float pll_loop_bw, float pll_damping, float freq_max, float freq_min, int dttl, float dttl_loop_bw, float dttl_damping, float max_rate_deviation) -> oqpsk_coherrent_demod_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of isl::oqpsk_coherrent_demod.

        To avoid accidental use of raw pointers, isl::oqpsk_coherrent_demod's constructor is in a private implementation class. isl::oqpsk_coherrent_demod::make is the public interface for creating new instances.

        Args:
            samples_per_symbol : 
            taps : 
            opt_point : 
            pll : 
            pll_loop_bw : 
            pll_damping : 
            freq_max : 
            freq_min : 
            dttl : 
            dttl_loop_bw : 
            dttl_damping : 
            max_rate_deviation : 
        """
        return _isl_swig.oqpsk_coherrent_demod_sptr_make(self, samples_per_symbol, taps, opt_point, pll, pll_loop_bw, pll_damping, freq_max, freq_min, dttl, dttl_loop_bw, dttl_damping, max_rate_deviation)


    def history(self):
        """history(oqpsk_coherrent_demod_sptr self) -> unsigned int"""
        return _isl_swig.oqpsk_coherrent_demod_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(oqpsk_coherrent_demod_sptr self, int which, int delay)
        declare_sample_delay(oqpsk_coherrent_demod_sptr self, unsigned int delay)
        """
        return _isl_swig.oqpsk_coherrent_demod_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(oqpsk_coherrent_demod_sptr self, int which) -> unsigned int"""
        return _isl_swig.oqpsk_coherrent_demod_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(oqpsk_coherrent_demod_sptr self) -> int"""
        return _isl_swig.oqpsk_coherrent_demod_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(oqpsk_coherrent_demod_sptr self) -> double"""
        return _isl_swig.oqpsk_coherrent_demod_sptr_relative_rate(self)


    def start(self):
        """start(oqpsk_coherrent_demod_sptr self) -> bool"""
        return _isl_swig.oqpsk_coherrent_demod_sptr_start(self)


    def stop(self):
        """stop(oqpsk_coherrent_demod_sptr self) -> bool"""
        return _isl_swig.oqpsk_coherrent_demod_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(oqpsk_coherrent_demod_sptr self, unsigned int which_input) -> uint64_t"""
        return _isl_swig.oqpsk_coherrent_demod_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(oqpsk_coherrent_demod_sptr self, unsigned int which_output) -> uint64_t"""
        return _isl_swig.oqpsk_coherrent_demod_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(oqpsk_coherrent_demod_sptr self) -> int"""
        return _isl_swig.oqpsk_coherrent_demod_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(oqpsk_coherrent_demod_sptr self, int m)"""
        return _isl_swig.oqpsk_coherrent_demod_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(oqpsk_coherrent_demod_sptr self)"""
        return _isl_swig.oqpsk_coherrent_demod_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(oqpsk_coherrent_demod_sptr self) -> bool"""
        return _isl_swig.oqpsk_coherrent_demod_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(oqpsk_coherrent_demod_sptr self, int m)"""
        return _isl_swig.oqpsk_coherrent_demod_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(oqpsk_coherrent_demod_sptr self) -> int"""
        return _isl_swig.oqpsk_coherrent_demod_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(oqpsk_coherrent_demod_sptr self, int i) -> long"""
        return _isl_swig.oqpsk_coherrent_demod_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(oqpsk_coherrent_demod_sptr self, long max_output_buffer)
        set_max_output_buffer(oqpsk_coherrent_demod_sptr self, int port, long max_output_buffer)
        """
        return _isl_swig.oqpsk_coherrent_demod_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(oqpsk_coherrent_demod_sptr self, int i) -> long"""
        return _isl_swig.oqpsk_coherrent_demod_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(oqpsk_coherrent_demod_sptr self, long min_output_buffer)
        set_min_output_buffer(oqpsk_coherrent_demod_sptr self, int port, long min_output_buffer)
        """
        return _isl_swig.oqpsk_coherrent_demod_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(oqpsk_coherrent_demod_sptr self) -> float"""
        return _isl_swig.oqpsk_coherrent_demod_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(oqpsk_coherrent_demod_sptr self) -> float"""
        return _isl_swig.oqpsk_coherrent_demod_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(oqpsk_coherrent_demod_sptr self) -> float"""
        return _isl_swig.oqpsk_coherrent_demod_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(oqpsk_coherrent_demod_sptr self) -> float"""
        return _isl_swig.oqpsk_coherrent_demod_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(oqpsk_coherrent_demod_sptr self) -> float"""
        return _isl_swig.oqpsk_coherrent_demod_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(oqpsk_coherrent_demod_sptr self) -> float"""
        return _isl_swig.oqpsk_coherrent_demod_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(oqpsk_coherrent_demod_sptr self, int which) -> float
        pc_input_buffers_full(oqpsk_coherrent_demod_sptr self) -> pmt_vector_float
        """
        return _isl_swig.oqpsk_coherrent_demod_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(oqpsk_coherrent_demod_sptr self, int which) -> float
        pc_input_buffers_full_avg(oqpsk_coherrent_demod_sptr self) -> pmt_vector_float
        """
        return _isl_swig.oqpsk_coherrent_demod_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(oqpsk_coherrent_demod_sptr self, int which) -> float
        pc_input_buffers_full_var(oqpsk_coherrent_demod_sptr self) -> pmt_vector_float
        """
        return _isl_swig.oqpsk_coherrent_demod_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(oqpsk_coherrent_demod_sptr self, int which) -> float
        pc_output_buffers_full(oqpsk_coherrent_demod_sptr self) -> pmt_vector_float
        """
        return _isl_swig.oqpsk_coherrent_demod_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(oqpsk_coherrent_demod_sptr self, int which) -> float
        pc_output_buffers_full_avg(oqpsk_coherrent_demod_sptr self) -> pmt_vector_float
        """
        return _isl_swig.oqpsk_coherrent_demod_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(oqpsk_coherrent_demod_sptr self, int which) -> float
        pc_output_buffers_full_var(oqpsk_coherrent_demod_sptr self) -> pmt_vector_float
        """
        return _isl_swig.oqpsk_coherrent_demod_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(oqpsk_coherrent_demod_sptr self) -> float"""
        return _isl_swig.oqpsk_coherrent_demod_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(oqpsk_coherrent_demod_sptr self) -> float"""
        return _isl_swig.oqpsk_coherrent_demod_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(oqpsk_coherrent_demod_sptr self) -> float"""
        return _isl_swig.oqpsk_coherrent_demod_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(oqpsk_coherrent_demod_sptr self) -> float"""
        return _isl_swig.oqpsk_coherrent_demod_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(oqpsk_coherrent_demod_sptr self) -> float"""
        return _isl_swig.oqpsk_coherrent_demod_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(oqpsk_coherrent_demod_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _isl_swig.oqpsk_coherrent_demod_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(oqpsk_coherrent_demod_sptr self)"""
        return _isl_swig.oqpsk_coherrent_demod_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(oqpsk_coherrent_demod_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _isl_swig.oqpsk_coherrent_demod_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(oqpsk_coherrent_demod_sptr self) -> int"""
        return _isl_swig.oqpsk_coherrent_demod_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(oqpsk_coherrent_demod_sptr self) -> int"""
        return _isl_swig.oqpsk_coherrent_demod_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(oqpsk_coherrent_demod_sptr self, int priority) -> int"""
        return _isl_swig.oqpsk_coherrent_demod_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(oqpsk_coherrent_demod_sptr self) -> std::string"""
        return _isl_swig.oqpsk_coherrent_demod_sptr_name(self)


    def symbol_name(self):
        """symbol_name(oqpsk_coherrent_demod_sptr self) -> std::string"""
        return _isl_swig.oqpsk_coherrent_demod_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(oqpsk_coherrent_demod_sptr self) -> io_signature_sptr"""
        return _isl_swig.oqpsk_coherrent_demod_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(oqpsk_coherrent_demod_sptr self) -> io_signature_sptr"""
        return _isl_swig.oqpsk_coherrent_demod_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(oqpsk_coherrent_demod_sptr self) -> long"""
        return _isl_swig.oqpsk_coherrent_demod_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(oqpsk_coherrent_demod_sptr self) -> basic_block_sptr"""
        return _isl_swig.oqpsk_coherrent_demod_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(oqpsk_coherrent_demod_sptr self, int ninputs, int noutputs) -> bool"""
        return _isl_swig.oqpsk_coherrent_demod_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(oqpsk_coherrent_demod_sptr self) -> std::string"""
        return _isl_swig.oqpsk_coherrent_demod_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(oqpsk_coherrent_demod_sptr self, std::string name)"""
        return _isl_swig.oqpsk_coherrent_demod_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(oqpsk_coherrent_demod_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _isl_swig.oqpsk_coherrent_demod_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(oqpsk_coherrent_demod_sptr self) -> swig_int_ptr"""
        return _isl_swig.oqpsk_coherrent_demod_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(oqpsk_coherrent_demod_sptr self) -> swig_int_ptr"""
        return _isl_swig.oqpsk_coherrent_demod_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(oqpsk_coherrent_demod_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _isl_swig.oqpsk_coherrent_demod_sptr_message_subscribers(self, which_port)

oqpsk_coherrent_demod_sptr_swigregister = _isl_swig.oqpsk_coherrent_demod_sptr_swigregister
oqpsk_coherrent_demod_sptr_swigregister(oqpsk_coherrent_demod_sptr)


oqpsk_coherrent_demod_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
oqpsk_coherrent_demod = oqpsk_coherrent_demod.make;

class qpsk_decimator_cc(object):
    """
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of isl::qpsk_decimator_cc.

    To avoid accidental use of raw pointers, isl::qpsk_decimator_cc's constructor is in a private implementation class. isl::qpsk_decimator_cc::make is the public interface for creating new instances.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make():
        """
        make() -> qpsk_decimator_cc_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of isl::qpsk_decimator_cc.

        To avoid accidental use of raw pointers, isl::qpsk_decimator_cc's constructor is in a private implementation class. isl::qpsk_decimator_cc::make is the public interface for creating new instances.
        """
        return _isl_swig.qpsk_decimator_cc_make()

    make = staticmethod(make)
    __swig_destroy__ = _isl_swig.delete_qpsk_decimator_cc
    __del__ = lambda self: None
qpsk_decimator_cc_swigregister = _isl_swig.qpsk_decimator_cc_swigregister
qpsk_decimator_cc_swigregister(qpsk_decimator_cc)

def qpsk_decimator_cc_make():
    """
    qpsk_decimator_cc_make() -> qpsk_decimator_cc_sptr

    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of isl::qpsk_decimator_cc.

    To avoid accidental use of raw pointers, isl::qpsk_decimator_cc's constructor is in a private implementation class. isl::qpsk_decimator_cc::make is the public interface for creating new instances.
    """
    return _isl_swig.qpsk_decimator_cc_make()

class qpsk_decimator_cc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::isl::qpsk_decimator_cc)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::isl::qpsk_decimator_cc)> self) -> qpsk_decimator_cc_sptr
        __init__(boost::shared_ptr<(gr::isl::qpsk_decimator_cc)> self, qpsk_decimator_cc p) -> qpsk_decimator_cc_sptr
        """
        this = _isl_swig.new_qpsk_decimator_cc_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(qpsk_decimator_cc_sptr self) -> qpsk_decimator_cc"""
        return _isl_swig.qpsk_decimator_cc_sptr___deref__(self)

    __swig_destroy__ = _isl_swig.delete_qpsk_decimator_cc_sptr
    __del__ = lambda self: None

    def make(self):
        """
        make(qpsk_decimator_cc_sptr self) -> qpsk_decimator_cc_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of isl::qpsk_decimator_cc.

        To avoid accidental use of raw pointers, isl::qpsk_decimator_cc's constructor is in a private implementation class. isl::qpsk_decimator_cc::make is the public interface for creating new instances.
        """
        return _isl_swig.qpsk_decimator_cc_sptr_make(self)


    def history(self):
        """history(qpsk_decimator_cc_sptr self) -> unsigned int"""
        return _isl_swig.qpsk_decimator_cc_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(qpsk_decimator_cc_sptr self, int which, int delay)
        declare_sample_delay(qpsk_decimator_cc_sptr self, unsigned int delay)
        """
        return _isl_swig.qpsk_decimator_cc_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(qpsk_decimator_cc_sptr self, int which) -> unsigned int"""
        return _isl_swig.qpsk_decimator_cc_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(qpsk_decimator_cc_sptr self) -> int"""
        return _isl_swig.qpsk_decimator_cc_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(qpsk_decimator_cc_sptr self) -> double"""
        return _isl_swig.qpsk_decimator_cc_sptr_relative_rate(self)


    def start(self):
        """start(qpsk_decimator_cc_sptr self) -> bool"""
        return _isl_swig.qpsk_decimator_cc_sptr_start(self)


    def stop(self):
        """stop(qpsk_decimator_cc_sptr self) -> bool"""
        return _isl_swig.qpsk_decimator_cc_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(qpsk_decimator_cc_sptr self, unsigned int which_input) -> uint64_t"""
        return _isl_swig.qpsk_decimator_cc_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(qpsk_decimator_cc_sptr self, unsigned int which_output) -> uint64_t"""
        return _isl_swig.qpsk_decimator_cc_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(qpsk_decimator_cc_sptr self) -> int"""
        return _isl_swig.qpsk_decimator_cc_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(qpsk_decimator_cc_sptr self, int m)"""
        return _isl_swig.qpsk_decimator_cc_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(qpsk_decimator_cc_sptr self)"""
        return _isl_swig.qpsk_decimator_cc_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(qpsk_decimator_cc_sptr self) -> bool"""
        return _isl_swig.qpsk_decimator_cc_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(qpsk_decimator_cc_sptr self, int m)"""
        return _isl_swig.qpsk_decimator_cc_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(qpsk_decimator_cc_sptr self) -> int"""
        return _isl_swig.qpsk_decimator_cc_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(qpsk_decimator_cc_sptr self, int i) -> long"""
        return _isl_swig.qpsk_decimator_cc_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(qpsk_decimator_cc_sptr self, long max_output_buffer)
        set_max_output_buffer(qpsk_decimator_cc_sptr self, int port, long max_output_buffer)
        """
        return _isl_swig.qpsk_decimator_cc_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(qpsk_decimator_cc_sptr self, int i) -> long"""
        return _isl_swig.qpsk_decimator_cc_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(qpsk_decimator_cc_sptr self, long min_output_buffer)
        set_min_output_buffer(qpsk_decimator_cc_sptr self, int port, long min_output_buffer)
        """
        return _isl_swig.qpsk_decimator_cc_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(qpsk_decimator_cc_sptr self) -> float"""
        return _isl_swig.qpsk_decimator_cc_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(qpsk_decimator_cc_sptr self) -> float"""
        return _isl_swig.qpsk_decimator_cc_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(qpsk_decimator_cc_sptr self) -> float"""
        return _isl_swig.qpsk_decimator_cc_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(qpsk_decimator_cc_sptr self) -> float"""
        return _isl_swig.qpsk_decimator_cc_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(qpsk_decimator_cc_sptr self) -> float"""
        return _isl_swig.qpsk_decimator_cc_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(qpsk_decimator_cc_sptr self) -> float"""
        return _isl_swig.qpsk_decimator_cc_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(qpsk_decimator_cc_sptr self, int which) -> float
        pc_input_buffers_full(qpsk_decimator_cc_sptr self) -> pmt_vector_float
        """
        return _isl_swig.qpsk_decimator_cc_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(qpsk_decimator_cc_sptr self, int which) -> float
        pc_input_buffers_full_avg(qpsk_decimator_cc_sptr self) -> pmt_vector_float
        """
        return _isl_swig.qpsk_decimator_cc_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(qpsk_decimator_cc_sptr self, int which) -> float
        pc_input_buffers_full_var(qpsk_decimator_cc_sptr self) -> pmt_vector_float
        """
        return _isl_swig.qpsk_decimator_cc_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(qpsk_decimator_cc_sptr self, int which) -> float
        pc_output_buffers_full(qpsk_decimator_cc_sptr self) -> pmt_vector_float
        """
        return _isl_swig.qpsk_decimator_cc_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(qpsk_decimator_cc_sptr self, int which) -> float
        pc_output_buffers_full_avg(qpsk_decimator_cc_sptr self) -> pmt_vector_float
        """
        return _isl_swig.qpsk_decimator_cc_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(qpsk_decimator_cc_sptr self, int which) -> float
        pc_output_buffers_full_var(qpsk_decimator_cc_sptr self) -> pmt_vector_float
        """
        return _isl_swig.qpsk_decimator_cc_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(qpsk_decimator_cc_sptr self) -> float"""
        return _isl_swig.qpsk_decimator_cc_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(qpsk_decimator_cc_sptr self) -> float"""
        return _isl_swig.qpsk_decimator_cc_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(qpsk_decimator_cc_sptr self) -> float"""
        return _isl_swig.qpsk_decimator_cc_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(qpsk_decimator_cc_sptr self) -> float"""
        return _isl_swig.qpsk_decimator_cc_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(qpsk_decimator_cc_sptr self) -> float"""
        return _isl_swig.qpsk_decimator_cc_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(qpsk_decimator_cc_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _isl_swig.qpsk_decimator_cc_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(qpsk_decimator_cc_sptr self)"""
        return _isl_swig.qpsk_decimator_cc_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(qpsk_decimator_cc_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _isl_swig.qpsk_decimator_cc_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(qpsk_decimator_cc_sptr self) -> int"""
        return _isl_swig.qpsk_decimator_cc_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(qpsk_decimator_cc_sptr self) -> int"""
        return _isl_swig.qpsk_decimator_cc_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(qpsk_decimator_cc_sptr self, int priority) -> int"""
        return _isl_swig.qpsk_decimator_cc_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(qpsk_decimator_cc_sptr self) -> std::string"""
        return _isl_swig.qpsk_decimator_cc_sptr_name(self)


    def symbol_name(self):
        """symbol_name(qpsk_decimator_cc_sptr self) -> std::string"""
        return _isl_swig.qpsk_decimator_cc_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(qpsk_decimator_cc_sptr self) -> io_signature_sptr"""
        return _isl_swig.qpsk_decimator_cc_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(qpsk_decimator_cc_sptr self) -> io_signature_sptr"""
        return _isl_swig.qpsk_decimator_cc_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(qpsk_decimator_cc_sptr self) -> long"""
        return _isl_swig.qpsk_decimator_cc_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(qpsk_decimator_cc_sptr self) -> basic_block_sptr"""
        return _isl_swig.qpsk_decimator_cc_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(qpsk_decimator_cc_sptr self, int ninputs, int noutputs) -> bool"""
        return _isl_swig.qpsk_decimator_cc_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(qpsk_decimator_cc_sptr self) -> std::string"""
        return _isl_swig.qpsk_decimator_cc_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(qpsk_decimator_cc_sptr self, std::string name)"""
        return _isl_swig.qpsk_decimator_cc_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(qpsk_decimator_cc_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _isl_swig.qpsk_decimator_cc_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(qpsk_decimator_cc_sptr self) -> swig_int_ptr"""
        return _isl_swig.qpsk_decimator_cc_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(qpsk_decimator_cc_sptr self) -> swig_int_ptr"""
        return _isl_swig.qpsk_decimator_cc_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(qpsk_decimator_cc_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _isl_swig.qpsk_decimator_cc_sptr_message_subscribers(self, which_port)

qpsk_decimator_cc_sptr_swigregister = _isl_swig.qpsk_decimator_cc_sptr_swigregister
qpsk_decimator_cc_sptr_swigregister(qpsk_decimator_cc_sptr)


qpsk_decimator_cc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
qpsk_decimator_cc = qpsk_decimator_cc.make;

class c1_sys(object):
    """
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of isl::c1_sys.

    To avoid accidental use of raw pointers, isl::c1_sys's constructor is in a private implementation class. isl::c1_sys::make is the public interface for creating new instances.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make():
        """
        make() -> c1_sys_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of isl::c1_sys.

        To avoid accidental use of raw pointers, isl::c1_sys's constructor is in a private implementation class. isl::c1_sys::make is the public interface for creating new instances.
        """
        return _isl_swig.c1_sys_make()

    make = staticmethod(make)
    __swig_destroy__ = _isl_swig.delete_c1_sys
    __del__ = lambda self: None
c1_sys_swigregister = _isl_swig.c1_sys_swigregister
c1_sys_swigregister(c1_sys)

def c1_sys_make():
    """
    c1_sys_make() -> c1_sys_sptr

    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of isl::c1_sys.

    To avoid accidental use of raw pointers, isl::c1_sys's constructor is in a private implementation class. isl::c1_sys::make is the public interface for creating new instances.
    """
    return _isl_swig.c1_sys_make()

class c1_sys_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::isl::c1_sys)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::isl::c1_sys)> self) -> c1_sys_sptr
        __init__(boost::shared_ptr<(gr::isl::c1_sys)> self, c1_sys p) -> c1_sys_sptr
        """
        this = _isl_swig.new_c1_sys_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(c1_sys_sptr self) -> c1_sys"""
        return _isl_swig.c1_sys_sptr___deref__(self)

    __swig_destroy__ = _isl_swig.delete_c1_sys_sptr
    __del__ = lambda self: None

    def make(self):
        """
        make(c1_sys_sptr self) -> c1_sys_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of isl::c1_sys.

        To avoid accidental use of raw pointers, isl::c1_sys's constructor is in a private implementation class. isl::c1_sys::make is the public interface for creating new instances.
        """
        return _isl_swig.c1_sys_sptr_make(self)


    def history(self):
        """history(c1_sys_sptr self) -> unsigned int"""
        return _isl_swig.c1_sys_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(c1_sys_sptr self, int which, int delay)
        declare_sample_delay(c1_sys_sptr self, unsigned int delay)
        """
        return _isl_swig.c1_sys_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(c1_sys_sptr self, int which) -> unsigned int"""
        return _isl_swig.c1_sys_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(c1_sys_sptr self) -> int"""
        return _isl_swig.c1_sys_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(c1_sys_sptr self) -> double"""
        return _isl_swig.c1_sys_sptr_relative_rate(self)


    def start(self):
        """start(c1_sys_sptr self) -> bool"""
        return _isl_swig.c1_sys_sptr_start(self)


    def stop(self):
        """stop(c1_sys_sptr self) -> bool"""
        return _isl_swig.c1_sys_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(c1_sys_sptr self, unsigned int which_input) -> uint64_t"""
        return _isl_swig.c1_sys_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(c1_sys_sptr self, unsigned int which_output) -> uint64_t"""
        return _isl_swig.c1_sys_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(c1_sys_sptr self) -> int"""
        return _isl_swig.c1_sys_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(c1_sys_sptr self, int m)"""
        return _isl_swig.c1_sys_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(c1_sys_sptr self)"""
        return _isl_swig.c1_sys_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(c1_sys_sptr self) -> bool"""
        return _isl_swig.c1_sys_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(c1_sys_sptr self, int m)"""
        return _isl_swig.c1_sys_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(c1_sys_sptr self) -> int"""
        return _isl_swig.c1_sys_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(c1_sys_sptr self, int i) -> long"""
        return _isl_swig.c1_sys_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(c1_sys_sptr self, long max_output_buffer)
        set_max_output_buffer(c1_sys_sptr self, int port, long max_output_buffer)
        """
        return _isl_swig.c1_sys_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(c1_sys_sptr self, int i) -> long"""
        return _isl_swig.c1_sys_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(c1_sys_sptr self, long min_output_buffer)
        set_min_output_buffer(c1_sys_sptr self, int port, long min_output_buffer)
        """
        return _isl_swig.c1_sys_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(c1_sys_sptr self) -> float"""
        return _isl_swig.c1_sys_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(c1_sys_sptr self) -> float"""
        return _isl_swig.c1_sys_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(c1_sys_sptr self) -> float"""
        return _isl_swig.c1_sys_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(c1_sys_sptr self) -> float"""
        return _isl_swig.c1_sys_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(c1_sys_sptr self) -> float"""
        return _isl_swig.c1_sys_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(c1_sys_sptr self) -> float"""
        return _isl_swig.c1_sys_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(c1_sys_sptr self, int which) -> float
        pc_input_buffers_full(c1_sys_sptr self) -> pmt_vector_float
        """
        return _isl_swig.c1_sys_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(c1_sys_sptr self, int which) -> float
        pc_input_buffers_full_avg(c1_sys_sptr self) -> pmt_vector_float
        """
        return _isl_swig.c1_sys_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(c1_sys_sptr self, int which) -> float
        pc_input_buffers_full_var(c1_sys_sptr self) -> pmt_vector_float
        """
        return _isl_swig.c1_sys_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(c1_sys_sptr self, int which) -> float
        pc_output_buffers_full(c1_sys_sptr self) -> pmt_vector_float
        """
        return _isl_swig.c1_sys_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(c1_sys_sptr self, int which) -> float
        pc_output_buffers_full_avg(c1_sys_sptr self) -> pmt_vector_float
        """
        return _isl_swig.c1_sys_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(c1_sys_sptr self, int which) -> float
        pc_output_buffers_full_var(c1_sys_sptr self) -> pmt_vector_float
        """
        return _isl_swig.c1_sys_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(c1_sys_sptr self) -> float"""
        return _isl_swig.c1_sys_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(c1_sys_sptr self) -> float"""
        return _isl_swig.c1_sys_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(c1_sys_sptr self) -> float"""
        return _isl_swig.c1_sys_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(c1_sys_sptr self) -> float"""
        return _isl_swig.c1_sys_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(c1_sys_sptr self) -> float"""
        return _isl_swig.c1_sys_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(c1_sys_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _isl_swig.c1_sys_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(c1_sys_sptr self)"""
        return _isl_swig.c1_sys_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(c1_sys_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _isl_swig.c1_sys_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(c1_sys_sptr self) -> int"""
        return _isl_swig.c1_sys_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(c1_sys_sptr self) -> int"""
        return _isl_swig.c1_sys_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(c1_sys_sptr self, int priority) -> int"""
        return _isl_swig.c1_sys_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(c1_sys_sptr self) -> std::string"""
        return _isl_swig.c1_sys_sptr_name(self)


    def symbol_name(self):
        """symbol_name(c1_sys_sptr self) -> std::string"""
        return _isl_swig.c1_sys_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(c1_sys_sptr self) -> io_signature_sptr"""
        return _isl_swig.c1_sys_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(c1_sys_sptr self) -> io_signature_sptr"""
        return _isl_swig.c1_sys_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(c1_sys_sptr self) -> long"""
        return _isl_swig.c1_sys_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(c1_sys_sptr self) -> basic_block_sptr"""
        return _isl_swig.c1_sys_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(c1_sys_sptr self, int ninputs, int noutputs) -> bool"""
        return _isl_swig.c1_sys_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(c1_sys_sptr self) -> std::string"""
        return _isl_swig.c1_sys_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(c1_sys_sptr self, std::string name)"""
        return _isl_swig.c1_sys_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(c1_sys_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _isl_swig.c1_sys_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(c1_sys_sptr self) -> swig_int_ptr"""
        return _isl_swig.c1_sys_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(c1_sys_sptr self) -> swig_int_ptr"""
        return _isl_swig.c1_sys_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(c1_sys_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _isl_swig.c1_sys_sptr_message_subscribers(self, which_port)

c1_sys_sptr_swigregister = _isl_swig.c1_sys_sptr_swigregister
c1_sys_sptr_swigregister(c1_sys_sptr)


c1_sys_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
c1_sys = c1_sys.make;

class pn_decimator_FI(object):
    """
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of isl::pn_decimator_FI.

    To avoid accidental use of raw pointers, isl::pn_decimator_FI's constructor is in a private implementation class. isl::pn_decimator_FI::make is the public interface for creating new instances.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make():
        """
        make() -> pn_decimator_FI_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of isl::pn_decimator_FI.

        To avoid accidental use of raw pointers, isl::pn_decimator_FI's constructor is in a private implementation class. isl::pn_decimator_FI::make is the public interface for creating new instances.
        """
        return _isl_swig.pn_decimator_FI_make()

    make = staticmethod(make)
    __swig_destroy__ = _isl_swig.delete_pn_decimator_FI
    __del__ = lambda self: None
pn_decimator_FI_swigregister = _isl_swig.pn_decimator_FI_swigregister
pn_decimator_FI_swigregister(pn_decimator_FI)

def pn_decimator_FI_make():
    """
    pn_decimator_FI_make() -> pn_decimator_FI_sptr

    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of isl::pn_decimator_FI.

    To avoid accidental use of raw pointers, isl::pn_decimator_FI's constructor is in a private implementation class. isl::pn_decimator_FI::make is the public interface for creating new instances.
    """
    return _isl_swig.pn_decimator_FI_make()

class pn_decimator_FI_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::isl::pn_decimator_FI)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::isl::pn_decimator_FI)> self) -> pn_decimator_FI_sptr
        __init__(boost::shared_ptr<(gr::isl::pn_decimator_FI)> self, pn_decimator_FI p) -> pn_decimator_FI_sptr
        """
        this = _isl_swig.new_pn_decimator_FI_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(pn_decimator_FI_sptr self) -> pn_decimator_FI"""
        return _isl_swig.pn_decimator_FI_sptr___deref__(self)

    __swig_destroy__ = _isl_swig.delete_pn_decimator_FI_sptr
    __del__ = lambda self: None

    def make(self):
        """
        make(pn_decimator_FI_sptr self) -> pn_decimator_FI_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of isl::pn_decimator_FI.

        To avoid accidental use of raw pointers, isl::pn_decimator_FI's constructor is in a private implementation class. isl::pn_decimator_FI::make is the public interface for creating new instances.
        """
        return _isl_swig.pn_decimator_FI_sptr_make(self)


    def history(self):
        """history(pn_decimator_FI_sptr self) -> unsigned int"""
        return _isl_swig.pn_decimator_FI_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(pn_decimator_FI_sptr self, int which, int delay)
        declare_sample_delay(pn_decimator_FI_sptr self, unsigned int delay)
        """
        return _isl_swig.pn_decimator_FI_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(pn_decimator_FI_sptr self, int which) -> unsigned int"""
        return _isl_swig.pn_decimator_FI_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(pn_decimator_FI_sptr self) -> int"""
        return _isl_swig.pn_decimator_FI_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(pn_decimator_FI_sptr self) -> double"""
        return _isl_swig.pn_decimator_FI_sptr_relative_rate(self)


    def start(self):
        """start(pn_decimator_FI_sptr self) -> bool"""
        return _isl_swig.pn_decimator_FI_sptr_start(self)


    def stop(self):
        """stop(pn_decimator_FI_sptr self) -> bool"""
        return _isl_swig.pn_decimator_FI_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(pn_decimator_FI_sptr self, unsigned int which_input) -> uint64_t"""
        return _isl_swig.pn_decimator_FI_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(pn_decimator_FI_sptr self, unsigned int which_output) -> uint64_t"""
        return _isl_swig.pn_decimator_FI_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(pn_decimator_FI_sptr self) -> int"""
        return _isl_swig.pn_decimator_FI_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(pn_decimator_FI_sptr self, int m)"""
        return _isl_swig.pn_decimator_FI_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(pn_decimator_FI_sptr self)"""
        return _isl_swig.pn_decimator_FI_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(pn_decimator_FI_sptr self) -> bool"""
        return _isl_swig.pn_decimator_FI_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(pn_decimator_FI_sptr self, int m)"""
        return _isl_swig.pn_decimator_FI_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(pn_decimator_FI_sptr self) -> int"""
        return _isl_swig.pn_decimator_FI_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(pn_decimator_FI_sptr self, int i) -> long"""
        return _isl_swig.pn_decimator_FI_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(pn_decimator_FI_sptr self, long max_output_buffer)
        set_max_output_buffer(pn_decimator_FI_sptr self, int port, long max_output_buffer)
        """
        return _isl_swig.pn_decimator_FI_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(pn_decimator_FI_sptr self, int i) -> long"""
        return _isl_swig.pn_decimator_FI_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(pn_decimator_FI_sptr self, long min_output_buffer)
        set_min_output_buffer(pn_decimator_FI_sptr self, int port, long min_output_buffer)
        """
        return _isl_swig.pn_decimator_FI_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(pn_decimator_FI_sptr self) -> float"""
        return _isl_swig.pn_decimator_FI_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(pn_decimator_FI_sptr self) -> float"""
        return _isl_swig.pn_decimator_FI_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(pn_decimator_FI_sptr self) -> float"""
        return _isl_swig.pn_decimator_FI_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(pn_decimator_FI_sptr self) -> float"""
        return _isl_swig.pn_decimator_FI_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(pn_decimator_FI_sptr self) -> float"""
        return _isl_swig.pn_decimator_FI_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(pn_decimator_FI_sptr self) -> float"""
        return _isl_swig.pn_decimator_FI_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(pn_decimator_FI_sptr self, int which) -> float
        pc_input_buffers_full(pn_decimator_FI_sptr self) -> pmt_vector_float
        """
        return _isl_swig.pn_decimator_FI_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(pn_decimator_FI_sptr self, int which) -> float
        pc_input_buffers_full_avg(pn_decimator_FI_sptr self) -> pmt_vector_float
        """
        return _isl_swig.pn_decimator_FI_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(pn_decimator_FI_sptr self, int which) -> float
        pc_input_buffers_full_var(pn_decimator_FI_sptr self) -> pmt_vector_float
        """
        return _isl_swig.pn_decimator_FI_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(pn_decimator_FI_sptr self, int which) -> float
        pc_output_buffers_full(pn_decimator_FI_sptr self) -> pmt_vector_float
        """
        return _isl_swig.pn_decimator_FI_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(pn_decimator_FI_sptr self, int which) -> float
        pc_output_buffers_full_avg(pn_decimator_FI_sptr self) -> pmt_vector_float
        """
        return _isl_swig.pn_decimator_FI_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(pn_decimator_FI_sptr self, int which) -> float
        pc_output_buffers_full_var(pn_decimator_FI_sptr self) -> pmt_vector_float
        """
        return _isl_swig.pn_decimator_FI_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(pn_decimator_FI_sptr self) -> float"""
        return _isl_swig.pn_decimator_FI_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(pn_decimator_FI_sptr self) -> float"""
        return _isl_swig.pn_decimator_FI_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(pn_decimator_FI_sptr self) -> float"""
        return _isl_swig.pn_decimator_FI_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(pn_decimator_FI_sptr self) -> float"""
        return _isl_swig.pn_decimator_FI_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(pn_decimator_FI_sptr self) -> float"""
        return _isl_swig.pn_decimator_FI_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(pn_decimator_FI_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _isl_swig.pn_decimator_FI_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(pn_decimator_FI_sptr self)"""
        return _isl_swig.pn_decimator_FI_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(pn_decimator_FI_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _isl_swig.pn_decimator_FI_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(pn_decimator_FI_sptr self) -> int"""
        return _isl_swig.pn_decimator_FI_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(pn_decimator_FI_sptr self) -> int"""
        return _isl_swig.pn_decimator_FI_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(pn_decimator_FI_sptr self, int priority) -> int"""
        return _isl_swig.pn_decimator_FI_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(pn_decimator_FI_sptr self) -> std::string"""
        return _isl_swig.pn_decimator_FI_sptr_name(self)


    def symbol_name(self):
        """symbol_name(pn_decimator_FI_sptr self) -> std::string"""
        return _isl_swig.pn_decimator_FI_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(pn_decimator_FI_sptr self) -> io_signature_sptr"""
        return _isl_swig.pn_decimator_FI_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(pn_decimator_FI_sptr self) -> io_signature_sptr"""
        return _isl_swig.pn_decimator_FI_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(pn_decimator_FI_sptr self) -> long"""
        return _isl_swig.pn_decimator_FI_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(pn_decimator_FI_sptr self) -> basic_block_sptr"""
        return _isl_swig.pn_decimator_FI_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(pn_decimator_FI_sptr self, int ninputs, int noutputs) -> bool"""
        return _isl_swig.pn_decimator_FI_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(pn_decimator_FI_sptr self) -> std::string"""
        return _isl_swig.pn_decimator_FI_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(pn_decimator_FI_sptr self, std::string name)"""
        return _isl_swig.pn_decimator_FI_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(pn_decimator_FI_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _isl_swig.pn_decimator_FI_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(pn_decimator_FI_sptr self) -> swig_int_ptr"""
        return _isl_swig.pn_decimator_FI_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(pn_decimator_FI_sptr self) -> swig_int_ptr"""
        return _isl_swig.pn_decimator_FI_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(pn_decimator_FI_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _isl_swig.pn_decimator_FI_sptr_message_subscribers(self, which_port)

pn_decimator_FI_sptr_swigregister = _isl_swig.pn_decimator_FI_sptr_swigregister
pn_decimator_FI_sptr_swigregister(pn_decimator_FI_sptr)


pn_decimator_FI_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
pn_decimator_FI = pn_decimator_FI.make;

class PN_correlation(object):
    """
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of isl::PN_correlation.

    To avoid accidental use of raw pointers, isl::PN_correlation's constructor is in a private implementation class. isl::PN_correlation::make is the public interface for creating new instances.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make():
        """
        make() -> PN_correlation_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of isl::PN_correlation.

        To avoid accidental use of raw pointers, isl::PN_correlation's constructor is in a private implementation class. isl::PN_correlation::make is the public interface for creating new instances.
        """
        return _isl_swig.PN_correlation_make()

    make = staticmethod(make)
    __swig_destroy__ = _isl_swig.delete_PN_correlation
    __del__ = lambda self: None
PN_correlation_swigregister = _isl_swig.PN_correlation_swigregister
PN_correlation_swigregister(PN_correlation)

def PN_correlation_make():
    """
    PN_correlation_make() -> PN_correlation_sptr

    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of isl::PN_correlation.

    To avoid accidental use of raw pointers, isl::PN_correlation's constructor is in a private implementation class. isl::PN_correlation::make is the public interface for creating new instances.
    """
    return _isl_swig.PN_correlation_make()

class PN_correlation_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::isl::PN_correlation)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::isl::PN_correlation)> self) -> PN_correlation_sptr
        __init__(boost::shared_ptr<(gr::isl::PN_correlation)> self, PN_correlation p) -> PN_correlation_sptr
        """
        this = _isl_swig.new_PN_correlation_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(PN_correlation_sptr self) -> PN_correlation"""
        return _isl_swig.PN_correlation_sptr___deref__(self)

    __swig_destroy__ = _isl_swig.delete_PN_correlation_sptr
    __del__ = lambda self: None

    def make(self):
        """
        make(PN_correlation_sptr self) -> PN_correlation_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of isl::PN_correlation.

        To avoid accidental use of raw pointers, isl::PN_correlation's constructor is in a private implementation class. isl::PN_correlation::make is the public interface for creating new instances.
        """
        return _isl_swig.PN_correlation_sptr_make(self)


    def history(self):
        """history(PN_correlation_sptr self) -> unsigned int"""
        return _isl_swig.PN_correlation_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(PN_correlation_sptr self, int which, int delay)
        declare_sample_delay(PN_correlation_sptr self, unsigned int delay)
        """
        return _isl_swig.PN_correlation_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(PN_correlation_sptr self, int which) -> unsigned int"""
        return _isl_swig.PN_correlation_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(PN_correlation_sptr self) -> int"""
        return _isl_swig.PN_correlation_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(PN_correlation_sptr self) -> double"""
        return _isl_swig.PN_correlation_sptr_relative_rate(self)


    def start(self):
        """start(PN_correlation_sptr self) -> bool"""
        return _isl_swig.PN_correlation_sptr_start(self)


    def stop(self):
        """stop(PN_correlation_sptr self) -> bool"""
        return _isl_swig.PN_correlation_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(PN_correlation_sptr self, unsigned int which_input) -> uint64_t"""
        return _isl_swig.PN_correlation_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(PN_correlation_sptr self, unsigned int which_output) -> uint64_t"""
        return _isl_swig.PN_correlation_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(PN_correlation_sptr self) -> int"""
        return _isl_swig.PN_correlation_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(PN_correlation_sptr self, int m)"""
        return _isl_swig.PN_correlation_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(PN_correlation_sptr self)"""
        return _isl_swig.PN_correlation_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(PN_correlation_sptr self) -> bool"""
        return _isl_swig.PN_correlation_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(PN_correlation_sptr self, int m)"""
        return _isl_swig.PN_correlation_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(PN_correlation_sptr self) -> int"""
        return _isl_swig.PN_correlation_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(PN_correlation_sptr self, int i) -> long"""
        return _isl_swig.PN_correlation_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(PN_correlation_sptr self, long max_output_buffer)
        set_max_output_buffer(PN_correlation_sptr self, int port, long max_output_buffer)
        """
        return _isl_swig.PN_correlation_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(PN_correlation_sptr self, int i) -> long"""
        return _isl_swig.PN_correlation_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(PN_correlation_sptr self, long min_output_buffer)
        set_min_output_buffer(PN_correlation_sptr self, int port, long min_output_buffer)
        """
        return _isl_swig.PN_correlation_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(PN_correlation_sptr self) -> float"""
        return _isl_swig.PN_correlation_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(PN_correlation_sptr self) -> float"""
        return _isl_swig.PN_correlation_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(PN_correlation_sptr self) -> float"""
        return _isl_swig.PN_correlation_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(PN_correlation_sptr self) -> float"""
        return _isl_swig.PN_correlation_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(PN_correlation_sptr self) -> float"""
        return _isl_swig.PN_correlation_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(PN_correlation_sptr self) -> float"""
        return _isl_swig.PN_correlation_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(PN_correlation_sptr self, int which) -> float
        pc_input_buffers_full(PN_correlation_sptr self) -> pmt_vector_float
        """
        return _isl_swig.PN_correlation_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(PN_correlation_sptr self, int which) -> float
        pc_input_buffers_full_avg(PN_correlation_sptr self) -> pmt_vector_float
        """
        return _isl_swig.PN_correlation_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(PN_correlation_sptr self, int which) -> float
        pc_input_buffers_full_var(PN_correlation_sptr self) -> pmt_vector_float
        """
        return _isl_swig.PN_correlation_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(PN_correlation_sptr self, int which) -> float
        pc_output_buffers_full(PN_correlation_sptr self) -> pmt_vector_float
        """
        return _isl_swig.PN_correlation_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(PN_correlation_sptr self, int which) -> float
        pc_output_buffers_full_avg(PN_correlation_sptr self) -> pmt_vector_float
        """
        return _isl_swig.PN_correlation_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(PN_correlation_sptr self, int which) -> float
        pc_output_buffers_full_var(PN_correlation_sptr self) -> pmt_vector_float
        """
        return _isl_swig.PN_correlation_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(PN_correlation_sptr self) -> float"""
        return _isl_swig.PN_correlation_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(PN_correlation_sptr self) -> float"""
        return _isl_swig.PN_correlation_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(PN_correlation_sptr self) -> float"""
        return _isl_swig.PN_correlation_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(PN_correlation_sptr self) -> float"""
        return _isl_swig.PN_correlation_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(PN_correlation_sptr self) -> float"""
        return _isl_swig.PN_correlation_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(PN_correlation_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _isl_swig.PN_correlation_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(PN_correlation_sptr self)"""
        return _isl_swig.PN_correlation_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(PN_correlation_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _isl_swig.PN_correlation_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(PN_correlation_sptr self) -> int"""
        return _isl_swig.PN_correlation_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(PN_correlation_sptr self) -> int"""
        return _isl_swig.PN_correlation_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(PN_correlation_sptr self, int priority) -> int"""
        return _isl_swig.PN_correlation_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(PN_correlation_sptr self) -> std::string"""
        return _isl_swig.PN_correlation_sptr_name(self)


    def symbol_name(self):
        """symbol_name(PN_correlation_sptr self) -> std::string"""
        return _isl_swig.PN_correlation_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(PN_correlation_sptr self) -> io_signature_sptr"""
        return _isl_swig.PN_correlation_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(PN_correlation_sptr self) -> io_signature_sptr"""
        return _isl_swig.PN_correlation_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(PN_correlation_sptr self) -> long"""
        return _isl_swig.PN_correlation_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(PN_correlation_sptr self) -> basic_block_sptr"""
        return _isl_swig.PN_correlation_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(PN_correlation_sptr self, int ninputs, int noutputs) -> bool"""
        return _isl_swig.PN_correlation_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(PN_correlation_sptr self) -> std::string"""
        return _isl_swig.PN_correlation_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(PN_correlation_sptr self, std::string name)"""
        return _isl_swig.PN_correlation_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(PN_correlation_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _isl_swig.PN_correlation_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(PN_correlation_sptr self) -> swig_int_ptr"""
        return _isl_swig.PN_correlation_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(PN_correlation_sptr self) -> swig_int_ptr"""
        return _isl_swig.PN_correlation_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(PN_correlation_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _isl_swig.PN_correlation_sptr_message_subscribers(self, which_port)

PN_correlation_sptr_swigregister = _isl_swig.PN_correlation_sptr_swigregister
PN_correlation_sptr_swigregister(PN_correlation_sptr)


PN_correlation_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
PN_correlation = PN_correlation.make;

class PN_Location(object):
    """
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of isl::PN_Location.

    To avoid accidental use of raw pointers, isl::PN_Location's constructor is in a private implementation class. isl::PN_Location::make is the public interface for creating new instances.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make():
        """
        make() -> PN_Location_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of isl::PN_Location.

        To avoid accidental use of raw pointers, isl::PN_Location's constructor is in a private implementation class. isl::PN_Location::make is the public interface for creating new instances.
        """
        return _isl_swig.PN_Location_make()

    make = staticmethod(make)
    __swig_destroy__ = _isl_swig.delete_PN_Location
    __del__ = lambda self: None
PN_Location_swigregister = _isl_swig.PN_Location_swigregister
PN_Location_swigregister(PN_Location)

def PN_Location_make():
    """
    PN_Location_make() -> PN_Location_sptr

    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of isl::PN_Location.

    To avoid accidental use of raw pointers, isl::PN_Location's constructor is in a private implementation class. isl::PN_Location::make is the public interface for creating new instances.
    """
    return _isl_swig.PN_Location_make()

class PN_Location_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::isl::PN_Location)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::isl::PN_Location)> self) -> PN_Location_sptr
        __init__(boost::shared_ptr<(gr::isl::PN_Location)> self, PN_Location p) -> PN_Location_sptr
        """
        this = _isl_swig.new_PN_Location_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(PN_Location_sptr self) -> PN_Location"""
        return _isl_swig.PN_Location_sptr___deref__(self)

    __swig_destroy__ = _isl_swig.delete_PN_Location_sptr
    __del__ = lambda self: None

    def make(self):
        """
        make(PN_Location_sptr self) -> PN_Location_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of isl::PN_Location.

        To avoid accidental use of raw pointers, isl::PN_Location's constructor is in a private implementation class. isl::PN_Location::make is the public interface for creating new instances.
        """
        return _isl_swig.PN_Location_sptr_make(self)


    def history(self):
        """history(PN_Location_sptr self) -> unsigned int"""
        return _isl_swig.PN_Location_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(PN_Location_sptr self, int which, int delay)
        declare_sample_delay(PN_Location_sptr self, unsigned int delay)
        """
        return _isl_swig.PN_Location_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(PN_Location_sptr self, int which) -> unsigned int"""
        return _isl_swig.PN_Location_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(PN_Location_sptr self) -> int"""
        return _isl_swig.PN_Location_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(PN_Location_sptr self) -> double"""
        return _isl_swig.PN_Location_sptr_relative_rate(self)


    def start(self):
        """start(PN_Location_sptr self) -> bool"""
        return _isl_swig.PN_Location_sptr_start(self)


    def stop(self):
        """stop(PN_Location_sptr self) -> bool"""
        return _isl_swig.PN_Location_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(PN_Location_sptr self, unsigned int which_input) -> uint64_t"""
        return _isl_swig.PN_Location_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(PN_Location_sptr self, unsigned int which_output) -> uint64_t"""
        return _isl_swig.PN_Location_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(PN_Location_sptr self) -> int"""
        return _isl_swig.PN_Location_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(PN_Location_sptr self, int m)"""
        return _isl_swig.PN_Location_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(PN_Location_sptr self)"""
        return _isl_swig.PN_Location_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(PN_Location_sptr self) -> bool"""
        return _isl_swig.PN_Location_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(PN_Location_sptr self, int m)"""
        return _isl_swig.PN_Location_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(PN_Location_sptr self) -> int"""
        return _isl_swig.PN_Location_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(PN_Location_sptr self, int i) -> long"""
        return _isl_swig.PN_Location_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(PN_Location_sptr self, long max_output_buffer)
        set_max_output_buffer(PN_Location_sptr self, int port, long max_output_buffer)
        """
        return _isl_swig.PN_Location_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(PN_Location_sptr self, int i) -> long"""
        return _isl_swig.PN_Location_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(PN_Location_sptr self, long min_output_buffer)
        set_min_output_buffer(PN_Location_sptr self, int port, long min_output_buffer)
        """
        return _isl_swig.PN_Location_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(PN_Location_sptr self) -> float"""
        return _isl_swig.PN_Location_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(PN_Location_sptr self) -> float"""
        return _isl_swig.PN_Location_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(PN_Location_sptr self) -> float"""
        return _isl_swig.PN_Location_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(PN_Location_sptr self) -> float"""
        return _isl_swig.PN_Location_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(PN_Location_sptr self) -> float"""
        return _isl_swig.PN_Location_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(PN_Location_sptr self) -> float"""
        return _isl_swig.PN_Location_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(PN_Location_sptr self, int which) -> float
        pc_input_buffers_full(PN_Location_sptr self) -> pmt_vector_float
        """
        return _isl_swig.PN_Location_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(PN_Location_sptr self, int which) -> float
        pc_input_buffers_full_avg(PN_Location_sptr self) -> pmt_vector_float
        """
        return _isl_swig.PN_Location_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(PN_Location_sptr self, int which) -> float
        pc_input_buffers_full_var(PN_Location_sptr self) -> pmt_vector_float
        """
        return _isl_swig.PN_Location_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(PN_Location_sptr self, int which) -> float
        pc_output_buffers_full(PN_Location_sptr self) -> pmt_vector_float
        """
        return _isl_swig.PN_Location_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(PN_Location_sptr self, int which) -> float
        pc_output_buffers_full_avg(PN_Location_sptr self) -> pmt_vector_float
        """
        return _isl_swig.PN_Location_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(PN_Location_sptr self, int which) -> float
        pc_output_buffers_full_var(PN_Location_sptr self) -> pmt_vector_float
        """
        return _isl_swig.PN_Location_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(PN_Location_sptr self) -> float"""
        return _isl_swig.PN_Location_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(PN_Location_sptr self) -> float"""
        return _isl_swig.PN_Location_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(PN_Location_sptr self) -> float"""
        return _isl_swig.PN_Location_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(PN_Location_sptr self) -> float"""
        return _isl_swig.PN_Location_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(PN_Location_sptr self) -> float"""
        return _isl_swig.PN_Location_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(PN_Location_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _isl_swig.PN_Location_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(PN_Location_sptr self)"""
        return _isl_swig.PN_Location_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(PN_Location_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _isl_swig.PN_Location_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(PN_Location_sptr self) -> int"""
        return _isl_swig.PN_Location_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(PN_Location_sptr self) -> int"""
        return _isl_swig.PN_Location_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(PN_Location_sptr self, int priority) -> int"""
        return _isl_swig.PN_Location_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(PN_Location_sptr self) -> std::string"""
        return _isl_swig.PN_Location_sptr_name(self)


    def symbol_name(self):
        """symbol_name(PN_Location_sptr self) -> std::string"""
        return _isl_swig.PN_Location_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(PN_Location_sptr self) -> io_signature_sptr"""
        return _isl_swig.PN_Location_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(PN_Location_sptr self) -> io_signature_sptr"""
        return _isl_swig.PN_Location_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(PN_Location_sptr self) -> long"""
        return _isl_swig.PN_Location_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(PN_Location_sptr self) -> basic_block_sptr"""
        return _isl_swig.PN_Location_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(PN_Location_sptr self, int ninputs, int noutputs) -> bool"""
        return _isl_swig.PN_Location_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(PN_Location_sptr self) -> std::string"""
        return _isl_swig.PN_Location_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(PN_Location_sptr self, std::string name)"""
        return _isl_swig.PN_Location_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(PN_Location_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _isl_swig.PN_Location_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(PN_Location_sptr self) -> swig_int_ptr"""
        return _isl_swig.PN_Location_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(PN_Location_sptr self) -> swig_int_ptr"""
        return _isl_swig.PN_Location_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(PN_Location_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _isl_swig.PN_Location_sptr_message_subscribers(self, which_port)

PN_Location_sptr_swigregister = _isl_swig.PN_Location_sptr_swigregister
PN_Location_sptr_swigregister(PN_Location_sptr)


PN_Location_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
PN_Location = PN_Location.make;

class PN_Acquisition(object):
    """
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of isl::PN_Acquisition.

    To avoid accidental use of raw pointers, isl::PN_Acquisition's constructor is in a private implementation class. isl::PN_Acquisition::make is the public interface for creating new instances.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make():
        """
        make() -> PN_Acquisition_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of isl::PN_Acquisition.

        To avoid accidental use of raw pointers, isl::PN_Acquisition's constructor is in a private implementation class. isl::PN_Acquisition::make is the public interface for creating new instances.
        """
        return _isl_swig.PN_Acquisition_make()

    make = staticmethod(make)
    __swig_destroy__ = _isl_swig.delete_PN_Acquisition
    __del__ = lambda self: None
PN_Acquisition_swigregister = _isl_swig.PN_Acquisition_swigregister
PN_Acquisition_swigregister(PN_Acquisition)

def PN_Acquisition_make():
    """
    PN_Acquisition_make() -> PN_Acquisition_sptr

    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of isl::PN_Acquisition.

    To avoid accidental use of raw pointers, isl::PN_Acquisition's constructor is in a private implementation class. isl::PN_Acquisition::make is the public interface for creating new instances.
    """
    return _isl_swig.PN_Acquisition_make()

class PN_Acquisition_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::isl::PN_Acquisition)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::isl::PN_Acquisition)> self) -> PN_Acquisition_sptr
        __init__(boost::shared_ptr<(gr::isl::PN_Acquisition)> self, PN_Acquisition p) -> PN_Acquisition_sptr
        """
        this = _isl_swig.new_PN_Acquisition_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(PN_Acquisition_sptr self) -> PN_Acquisition"""
        return _isl_swig.PN_Acquisition_sptr___deref__(self)

    __swig_destroy__ = _isl_swig.delete_PN_Acquisition_sptr
    __del__ = lambda self: None

    def make(self):
        """
        make(PN_Acquisition_sptr self) -> PN_Acquisition_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of isl::PN_Acquisition.

        To avoid accidental use of raw pointers, isl::PN_Acquisition's constructor is in a private implementation class. isl::PN_Acquisition::make is the public interface for creating new instances.
        """
        return _isl_swig.PN_Acquisition_sptr_make(self)


    def history(self):
        """history(PN_Acquisition_sptr self) -> unsigned int"""
        return _isl_swig.PN_Acquisition_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(PN_Acquisition_sptr self, int which, int delay)
        declare_sample_delay(PN_Acquisition_sptr self, unsigned int delay)
        """
        return _isl_swig.PN_Acquisition_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(PN_Acquisition_sptr self, int which) -> unsigned int"""
        return _isl_swig.PN_Acquisition_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(PN_Acquisition_sptr self) -> int"""
        return _isl_swig.PN_Acquisition_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(PN_Acquisition_sptr self) -> double"""
        return _isl_swig.PN_Acquisition_sptr_relative_rate(self)


    def start(self):
        """start(PN_Acquisition_sptr self) -> bool"""
        return _isl_swig.PN_Acquisition_sptr_start(self)


    def stop(self):
        """stop(PN_Acquisition_sptr self) -> bool"""
        return _isl_swig.PN_Acquisition_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(PN_Acquisition_sptr self, unsigned int which_input) -> uint64_t"""
        return _isl_swig.PN_Acquisition_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(PN_Acquisition_sptr self, unsigned int which_output) -> uint64_t"""
        return _isl_swig.PN_Acquisition_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(PN_Acquisition_sptr self) -> int"""
        return _isl_swig.PN_Acquisition_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(PN_Acquisition_sptr self, int m)"""
        return _isl_swig.PN_Acquisition_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(PN_Acquisition_sptr self)"""
        return _isl_swig.PN_Acquisition_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(PN_Acquisition_sptr self) -> bool"""
        return _isl_swig.PN_Acquisition_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(PN_Acquisition_sptr self, int m)"""
        return _isl_swig.PN_Acquisition_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(PN_Acquisition_sptr self) -> int"""
        return _isl_swig.PN_Acquisition_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(PN_Acquisition_sptr self, int i) -> long"""
        return _isl_swig.PN_Acquisition_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(PN_Acquisition_sptr self, long max_output_buffer)
        set_max_output_buffer(PN_Acquisition_sptr self, int port, long max_output_buffer)
        """
        return _isl_swig.PN_Acquisition_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(PN_Acquisition_sptr self, int i) -> long"""
        return _isl_swig.PN_Acquisition_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(PN_Acquisition_sptr self, long min_output_buffer)
        set_min_output_buffer(PN_Acquisition_sptr self, int port, long min_output_buffer)
        """
        return _isl_swig.PN_Acquisition_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(PN_Acquisition_sptr self) -> float"""
        return _isl_swig.PN_Acquisition_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(PN_Acquisition_sptr self) -> float"""
        return _isl_swig.PN_Acquisition_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(PN_Acquisition_sptr self) -> float"""
        return _isl_swig.PN_Acquisition_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(PN_Acquisition_sptr self) -> float"""
        return _isl_swig.PN_Acquisition_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(PN_Acquisition_sptr self) -> float"""
        return _isl_swig.PN_Acquisition_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(PN_Acquisition_sptr self) -> float"""
        return _isl_swig.PN_Acquisition_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(PN_Acquisition_sptr self, int which) -> float
        pc_input_buffers_full(PN_Acquisition_sptr self) -> pmt_vector_float
        """
        return _isl_swig.PN_Acquisition_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(PN_Acquisition_sptr self, int which) -> float
        pc_input_buffers_full_avg(PN_Acquisition_sptr self) -> pmt_vector_float
        """
        return _isl_swig.PN_Acquisition_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(PN_Acquisition_sptr self, int which) -> float
        pc_input_buffers_full_var(PN_Acquisition_sptr self) -> pmt_vector_float
        """
        return _isl_swig.PN_Acquisition_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(PN_Acquisition_sptr self, int which) -> float
        pc_output_buffers_full(PN_Acquisition_sptr self) -> pmt_vector_float
        """
        return _isl_swig.PN_Acquisition_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(PN_Acquisition_sptr self, int which) -> float
        pc_output_buffers_full_avg(PN_Acquisition_sptr self) -> pmt_vector_float
        """
        return _isl_swig.PN_Acquisition_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(PN_Acquisition_sptr self, int which) -> float
        pc_output_buffers_full_var(PN_Acquisition_sptr self) -> pmt_vector_float
        """
        return _isl_swig.PN_Acquisition_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(PN_Acquisition_sptr self) -> float"""
        return _isl_swig.PN_Acquisition_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(PN_Acquisition_sptr self) -> float"""
        return _isl_swig.PN_Acquisition_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(PN_Acquisition_sptr self) -> float"""
        return _isl_swig.PN_Acquisition_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(PN_Acquisition_sptr self) -> float"""
        return _isl_swig.PN_Acquisition_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(PN_Acquisition_sptr self) -> float"""
        return _isl_swig.PN_Acquisition_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(PN_Acquisition_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _isl_swig.PN_Acquisition_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(PN_Acquisition_sptr self)"""
        return _isl_swig.PN_Acquisition_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(PN_Acquisition_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _isl_swig.PN_Acquisition_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(PN_Acquisition_sptr self) -> int"""
        return _isl_swig.PN_Acquisition_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(PN_Acquisition_sptr self) -> int"""
        return _isl_swig.PN_Acquisition_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(PN_Acquisition_sptr self, int priority) -> int"""
        return _isl_swig.PN_Acquisition_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(PN_Acquisition_sptr self) -> std::string"""
        return _isl_swig.PN_Acquisition_sptr_name(self)


    def symbol_name(self):
        """symbol_name(PN_Acquisition_sptr self) -> std::string"""
        return _isl_swig.PN_Acquisition_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(PN_Acquisition_sptr self) -> io_signature_sptr"""
        return _isl_swig.PN_Acquisition_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(PN_Acquisition_sptr self) -> io_signature_sptr"""
        return _isl_swig.PN_Acquisition_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(PN_Acquisition_sptr self) -> long"""
        return _isl_swig.PN_Acquisition_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(PN_Acquisition_sptr self) -> basic_block_sptr"""
        return _isl_swig.PN_Acquisition_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(PN_Acquisition_sptr self, int ninputs, int noutputs) -> bool"""
        return _isl_swig.PN_Acquisition_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(PN_Acquisition_sptr self) -> std::string"""
        return _isl_swig.PN_Acquisition_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(PN_Acquisition_sptr self, std::string name)"""
        return _isl_swig.PN_Acquisition_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(PN_Acquisition_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _isl_swig.PN_Acquisition_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(PN_Acquisition_sptr self) -> swig_int_ptr"""
        return _isl_swig.PN_Acquisition_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(PN_Acquisition_sptr self) -> swig_int_ptr"""
        return _isl_swig.PN_Acquisition_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(PN_Acquisition_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _isl_swig.PN_Acquisition_sptr_message_subscribers(self, which_port)

PN_Acquisition_sptr_swigregister = _isl_swig.PN_Acquisition_sptr_swigregister
PN_Acquisition_sptr_swigregister(PN_Acquisition_sptr)


PN_Acquisition_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
PN_Acquisition = PN_Acquisition.make;

class pn_correlator(object):
    """
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of isl::pn_correlator.

    To avoid accidental use of raw pointers, isl::pn_correlator's constructor is in a private implementation class. isl::pn_correlator::make is the public interface for creating new instances.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make():
        """
        make() -> pn_correlator_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of isl::pn_correlator.

        To avoid accidental use of raw pointers, isl::pn_correlator's constructor is in a private implementation class. isl::pn_correlator::make is the public interface for creating new instances.
        """
        return _isl_swig.pn_correlator_make()

    make = staticmethod(make)
    __swig_destroy__ = _isl_swig.delete_pn_correlator
    __del__ = lambda self: None
pn_correlator_swigregister = _isl_swig.pn_correlator_swigregister
pn_correlator_swigregister(pn_correlator)

def pn_correlator_make():
    """
    pn_correlator_make() -> pn_correlator_sptr

    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of isl::pn_correlator.

    To avoid accidental use of raw pointers, isl::pn_correlator's constructor is in a private implementation class. isl::pn_correlator::make is the public interface for creating new instances.
    """
    return _isl_swig.pn_correlator_make()

class pn_correlator_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::isl::pn_correlator)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::isl::pn_correlator)> self) -> pn_correlator_sptr
        __init__(boost::shared_ptr<(gr::isl::pn_correlator)> self, pn_correlator p) -> pn_correlator_sptr
        """
        this = _isl_swig.new_pn_correlator_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(pn_correlator_sptr self) -> pn_correlator"""
        return _isl_swig.pn_correlator_sptr___deref__(self)

    __swig_destroy__ = _isl_swig.delete_pn_correlator_sptr
    __del__ = lambda self: None

    def make(self):
        """
        make(pn_correlator_sptr self) -> pn_correlator_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of isl::pn_correlator.

        To avoid accidental use of raw pointers, isl::pn_correlator's constructor is in a private implementation class. isl::pn_correlator::make is the public interface for creating new instances.
        """
        return _isl_swig.pn_correlator_sptr_make(self)


    def history(self):
        """history(pn_correlator_sptr self) -> unsigned int"""
        return _isl_swig.pn_correlator_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(pn_correlator_sptr self, int which, int delay)
        declare_sample_delay(pn_correlator_sptr self, unsigned int delay)
        """
        return _isl_swig.pn_correlator_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(pn_correlator_sptr self, int which) -> unsigned int"""
        return _isl_swig.pn_correlator_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(pn_correlator_sptr self) -> int"""
        return _isl_swig.pn_correlator_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(pn_correlator_sptr self) -> double"""
        return _isl_swig.pn_correlator_sptr_relative_rate(self)


    def start(self):
        """start(pn_correlator_sptr self) -> bool"""
        return _isl_swig.pn_correlator_sptr_start(self)


    def stop(self):
        """stop(pn_correlator_sptr self) -> bool"""
        return _isl_swig.pn_correlator_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(pn_correlator_sptr self, unsigned int which_input) -> uint64_t"""
        return _isl_swig.pn_correlator_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(pn_correlator_sptr self, unsigned int which_output) -> uint64_t"""
        return _isl_swig.pn_correlator_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(pn_correlator_sptr self) -> int"""
        return _isl_swig.pn_correlator_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(pn_correlator_sptr self, int m)"""
        return _isl_swig.pn_correlator_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(pn_correlator_sptr self)"""
        return _isl_swig.pn_correlator_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(pn_correlator_sptr self) -> bool"""
        return _isl_swig.pn_correlator_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(pn_correlator_sptr self, int m)"""
        return _isl_swig.pn_correlator_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(pn_correlator_sptr self) -> int"""
        return _isl_swig.pn_correlator_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(pn_correlator_sptr self, int i) -> long"""
        return _isl_swig.pn_correlator_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(pn_correlator_sptr self, long max_output_buffer)
        set_max_output_buffer(pn_correlator_sptr self, int port, long max_output_buffer)
        """
        return _isl_swig.pn_correlator_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(pn_correlator_sptr self, int i) -> long"""
        return _isl_swig.pn_correlator_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(pn_correlator_sptr self, long min_output_buffer)
        set_min_output_buffer(pn_correlator_sptr self, int port, long min_output_buffer)
        """
        return _isl_swig.pn_correlator_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(pn_correlator_sptr self) -> float"""
        return _isl_swig.pn_correlator_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(pn_correlator_sptr self) -> float"""
        return _isl_swig.pn_correlator_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(pn_correlator_sptr self) -> float"""
        return _isl_swig.pn_correlator_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(pn_correlator_sptr self) -> float"""
        return _isl_swig.pn_correlator_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(pn_correlator_sptr self) -> float"""
        return _isl_swig.pn_correlator_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(pn_correlator_sptr self) -> float"""
        return _isl_swig.pn_correlator_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(pn_correlator_sptr self, int which) -> float
        pc_input_buffers_full(pn_correlator_sptr self) -> pmt_vector_float
        """
        return _isl_swig.pn_correlator_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(pn_correlator_sptr self, int which) -> float
        pc_input_buffers_full_avg(pn_correlator_sptr self) -> pmt_vector_float
        """
        return _isl_swig.pn_correlator_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(pn_correlator_sptr self, int which) -> float
        pc_input_buffers_full_var(pn_correlator_sptr self) -> pmt_vector_float
        """
        return _isl_swig.pn_correlator_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(pn_correlator_sptr self, int which) -> float
        pc_output_buffers_full(pn_correlator_sptr self) -> pmt_vector_float
        """
        return _isl_swig.pn_correlator_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(pn_correlator_sptr self, int which) -> float
        pc_output_buffers_full_avg(pn_correlator_sptr self) -> pmt_vector_float
        """
        return _isl_swig.pn_correlator_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(pn_correlator_sptr self, int which) -> float
        pc_output_buffers_full_var(pn_correlator_sptr self) -> pmt_vector_float
        """
        return _isl_swig.pn_correlator_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(pn_correlator_sptr self) -> float"""
        return _isl_swig.pn_correlator_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(pn_correlator_sptr self) -> float"""
        return _isl_swig.pn_correlator_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(pn_correlator_sptr self) -> float"""
        return _isl_swig.pn_correlator_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(pn_correlator_sptr self) -> float"""
        return _isl_swig.pn_correlator_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(pn_correlator_sptr self) -> float"""
        return _isl_swig.pn_correlator_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(pn_correlator_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _isl_swig.pn_correlator_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(pn_correlator_sptr self)"""
        return _isl_swig.pn_correlator_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(pn_correlator_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _isl_swig.pn_correlator_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(pn_correlator_sptr self) -> int"""
        return _isl_swig.pn_correlator_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(pn_correlator_sptr self) -> int"""
        return _isl_swig.pn_correlator_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(pn_correlator_sptr self, int priority) -> int"""
        return _isl_swig.pn_correlator_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(pn_correlator_sptr self) -> std::string"""
        return _isl_swig.pn_correlator_sptr_name(self)


    def symbol_name(self):
        """symbol_name(pn_correlator_sptr self) -> std::string"""
        return _isl_swig.pn_correlator_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(pn_correlator_sptr self) -> io_signature_sptr"""
        return _isl_swig.pn_correlator_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(pn_correlator_sptr self) -> io_signature_sptr"""
        return _isl_swig.pn_correlator_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(pn_correlator_sptr self) -> long"""
        return _isl_swig.pn_correlator_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(pn_correlator_sptr self) -> basic_block_sptr"""
        return _isl_swig.pn_correlator_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(pn_correlator_sptr self, int ninputs, int noutputs) -> bool"""
        return _isl_swig.pn_correlator_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(pn_correlator_sptr self) -> std::string"""
        return _isl_swig.pn_correlator_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(pn_correlator_sptr self, std::string name)"""
        return _isl_swig.pn_correlator_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(pn_correlator_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _isl_swig.pn_correlator_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(pn_correlator_sptr self) -> swig_int_ptr"""
        return _isl_swig.pn_correlator_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(pn_correlator_sptr self) -> swig_int_ptr"""
        return _isl_swig.pn_correlator_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(pn_correlator_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _isl_swig.pn_correlator_sptr_message_subscribers(self, which_port)

pn_correlator_sptr_swigregister = _isl_swig.pn_correlator_sptr_swigregister
pn_correlator_sptr_swigregister(pn_correlator_sptr)


pn_correlator_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
pn_correlator = pn_correlator.make;

class gmsk_demod(object):
    """
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of isl::gmsk_demod.

    To avoid accidental use of raw pointers, isl::gmsk_demod's constructor is in a private implementation class. isl::gmsk_demod::make is the public interface for creating new instances.

    Args:
        dtll_gain : 
        pd_N_avg : 
        pd_k1 : 
        pd_k2 : 
        vco_gain : 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(dtll_gain, pd_N_avg, pd_k1, pd_k2, vco_gain):
        """
        make(float dtll_gain, int pd_N_avg, float pd_k1, float pd_k2, float vco_gain) -> gmsk_demod_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of isl::gmsk_demod.

        To avoid accidental use of raw pointers, isl::gmsk_demod's constructor is in a private implementation class. isl::gmsk_demod::make is the public interface for creating new instances.

        Args:
            dtll_gain : 
            pd_N_avg : 
            pd_k1 : 
            pd_k2 : 
            vco_gain : 
        """
        return _isl_swig.gmsk_demod_make(dtll_gain, pd_N_avg, pd_k1, pd_k2, vco_gain)

    make = staticmethod(make)
    __swig_destroy__ = _isl_swig.delete_gmsk_demod
    __del__ = lambda self: None
gmsk_demod_swigregister = _isl_swig.gmsk_demod_swigregister
gmsk_demod_swigregister(gmsk_demod)

def gmsk_demod_make(dtll_gain, pd_N_avg, pd_k1, pd_k2, vco_gain):
    """
    gmsk_demod_make(float dtll_gain, int pd_N_avg, float pd_k1, float pd_k2, float vco_gain) -> gmsk_demod_sptr

    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of isl::gmsk_demod.

    To avoid accidental use of raw pointers, isl::gmsk_demod's constructor is in a private implementation class. isl::gmsk_demod::make is the public interface for creating new instances.

    Args:
        dtll_gain : 
        pd_N_avg : 
        pd_k1 : 
        pd_k2 : 
        vco_gain : 
    """
    return _isl_swig.gmsk_demod_make(dtll_gain, pd_N_avg, pd_k1, pd_k2, vco_gain)

class gmsk_demod_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::isl::gmsk_demod)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::isl::gmsk_demod)> self) -> gmsk_demod_sptr
        __init__(boost::shared_ptr<(gr::isl::gmsk_demod)> self, gmsk_demod p) -> gmsk_demod_sptr
        """
        this = _isl_swig.new_gmsk_demod_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(gmsk_demod_sptr self) -> gmsk_demod"""
        return _isl_swig.gmsk_demod_sptr___deref__(self)

    __swig_destroy__ = _isl_swig.delete_gmsk_demod_sptr
    __del__ = lambda self: None

    def make(self, dtll_gain, pd_N_avg, pd_k1, pd_k2, vco_gain):
        """
        make(gmsk_demod_sptr self, float dtll_gain, int pd_N_avg, float pd_k1, float pd_k2, float vco_gain) -> gmsk_demod_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of isl::gmsk_demod.

        To avoid accidental use of raw pointers, isl::gmsk_demod's constructor is in a private implementation class. isl::gmsk_demod::make is the public interface for creating new instances.

        Args:
            dtll_gain : 
            pd_N_avg : 
            pd_k1 : 
            pd_k2 : 
            vco_gain : 
        """
        return _isl_swig.gmsk_demod_sptr_make(self, dtll_gain, pd_N_avg, pd_k1, pd_k2, vco_gain)


    def history(self):
        """history(gmsk_demod_sptr self) -> unsigned int"""
        return _isl_swig.gmsk_demod_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(gmsk_demod_sptr self, int which, int delay)
        declare_sample_delay(gmsk_demod_sptr self, unsigned int delay)
        """
        return _isl_swig.gmsk_demod_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(gmsk_demod_sptr self, int which) -> unsigned int"""
        return _isl_swig.gmsk_demod_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(gmsk_demod_sptr self) -> int"""
        return _isl_swig.gmsk_demod_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(gmsk_demod_sptr self) -> double"""
        return _isl_swig.gmsk_demod_sptr_relative_rate(self)


    def start(self):
        """start(gmsk_demod_sptr self) -> bool"""
        return _isl_swig.gmsk_demod_sptr_start(self)


    def stop(self):
        """stop(gmsk_demod_sptr self) -> bool"""
        return _isl_swig.gmsk_demod_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(gmsk_demod_sptr self, unsigned int which_input) -> uint64_t"""
        return _isl_swig.gmsk_demod_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(gmsk_demod_sptr self, unsigned int which_output) -> uint64_t"""
        return _isl_swig.gmsk_demod_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(gmsk_demod_sptr self) -> int"""
        return _isl_swig.gmsk_demod_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(gmsk_demod_sptr self, int m)"""
        return _isl_swig.gmsk_demod_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(gmsk_demod_sptr self)"""
        return _isl_swig.gmsk_demod_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(gmsk_demod_sptr self) -> bool"""
        return _isl_swig.gmsk_demod_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(gmsk_demod_sptr self, int m)"""
        return _isl_swig.gmsk_demod_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(gmsk_demod_sptr self) -> int"""
        return _isl_swig.gmsk_demod_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(gmsk_demod_sptr self, int i) -> long"""
        return _isl_swig.gmsk_demod_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(gmsk_demod_sptr self, long max_output_buffer)
        set_max_output_buffer(gmsk_demod_sptr self, int port, long max_output_buffer)
        """
        return _isl_swig.gmsk_demod_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(gmsk_demod_sptr self, int i) -> long"""
        return _isl_swig.gmsk_demod_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(gmsk_demod_sptr self, long min_output_buffer)
        set_min_output_buffer(gmsk_demod_sptr self, int port, long min_output_buffer)
        """
        return _isl_swig.gmsk_demod_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(gmsk_demod_sptr self) -> float"""
        return _isl_swig.gmsk_demod_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(gmsk_demod_sptr self) -> float"""
        return _isl_swig.gmsk_demod_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(gmsk_demod_sptr self) -> float"""
        return _isl_swig.gmsk_demod_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(gmsk_demod_sptr self) -> float"""
        return _isl_swig.gmsk_demod_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(gmsk_demod_sptr self) -> float"""
        return _isl_swig.gmsk_demod_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(gmsk_demod_sptr self) -> float"""
        return _isl_swig.gmsk_demod_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(gmsk_demod_sptr self, int which) -> float
        pc_input_buffers_full(gmsk_demod_sptr self) -> pmt_vector_float
        """
        return _isl_swig.gmsk_demod_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(gmsk_demod_sptr self, int which) -> float
        pc_input_buffers_full_avg(gmsk_demod_sptr self) -> pmt_vector_float
        """
        return _isl_swig.gmsk_demod_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(gmsk_demod_sptr self, int which) -> float
        pc_input_buffers_full_var(gmsk_demod_sptr self) -> pmt_vector_float
        """
        return _isl_swig.gmsk_demod_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(gmsk_demod_sptr self, int which) -> float
        pc_output_buffers_full(gmsk_demod_sptr self) -> pmt_vector_float
        """
        return _isl_swig.gmsk_demod_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(gmsk_demod_sptr self, int which) -> float
        pc_output_buffers_full_avg(gmsk_demod_sptr self) -> pmt_vector_float
        """
        return _isl_swig.gmsk_demod_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(gmsk_demod_sptr self, int which) -> float
        pc_output_buffers_full_var(gmsk_demod_sptr self) -> pmt_vector_float
        """
        return _isl_swig.gmsk_demod_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(gmsk_demod_sptr self) -> float"""
        return _isl_swig.gmsk_demod_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(gmsk_demod_sptr self) -> float"""
        return _isl_swig.gmsk_demod_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(gmsk_demod_sptr self) -> float"""
        return _isl_swig.gmsk_demod_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(gmsk_demod_sptr self) -> float"""
        return _isl_swig.gmsk_demod_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(gmsk_demod_sptr self) -> float"""
        return _isl_swig.gmsk_demod_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(gmsk_demod_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _isl_swig.gmsk_demod_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(gmsk_demod_sptr self)"""
        return _isl_swig.gmsk_demod_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(gmsk_demod_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _isl_swig.gmsk_demod_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(gmsk_demod_sptr self) -> int"""
        return _isl_swig.gmsk_demod_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(gmsk_demod_sptr self) -> int"""
        return _isl_swig.gmsk_demod_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(gmsk_demod_sptr self, int priority) -> int"""
        return _isl_swig.gmsk_demod_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(gmsk_demod_sptr self) -> std::string"""
        return _isl_swig.gmsk_demod_sptr_name(self)


    def symbol_name(self):
        """symbol_name(gmsk_demod_sptr self) -> std::string"""
        return _isl_swig.gmsk_demod_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(gmsk_demod_sptr self) -> io_signature_sptr"""
        return _isl_swig.gmsk_demod_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(gmsk_demod_sptr self) -> io_signature_sptr"""
        return _isl_swig.gmsk_demod_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(gmsk_demod_sptr self) -> long"""
        return _isl_swig.gmsk_demod_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(gmsk_demod_sptr self) -> basic_block_sptr"""
        return _isl_swig.gmsk_demod_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(gmsk_demod_sptr self, int ninputs, int noutputs) -> bool"""
        return _isl_swig.gmsk_demod_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(gmsk_demod_sptr self) -> std::string"""
        return _isl_swig.gmsk_demod_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(gmsk_demod_sptr self, std::string name)"""
        return _isl_swig.gmsk_demod_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(gmsk_demod_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _isl_swig.gmsk_demod_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(gmsk_demod_sptr self) -> swig_int_ptr"""
        return _isl_swig.gmsk_demod_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(gmsk_demod_sptr self) -> swig_int_ptr"""
        return _isl_swig.gmsk_demod_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(gmsk_demod_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _isl_swig.gmsk_demod_sptr_message_subscribers(self, which_port)

gmsk_demod_sptr_swigregister = _isl_swig.gmsk_demod_sptr_swigregister
gmsk_demod_sptr_swigregister(gmsk_demod_sptr)


gmsk_demod_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
gmsk_demod = gmsk_demod.make;

class qpsk_recover_cc(object):
    """
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of isl::qpsk_recover_cc.

    To avoid accidental use of raw pointers, isl::qpsk_recover_cc's constructor is in a private implementation class. isl::qpsk_recover_cc::make is the public interface for creating new instances.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make():
        """
        make() -> qpsk_recover_cc_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of isl::qpsk_recover_cc.

        To avoid accidental use of raw pointers, isl::qpsk_recover_cc's constructor is in a private implementation class. isl::qpsk_recover_cc::make is the public interface for creating new instances.
        """
        return _isl_swig.qpsk_recover_cc_make()

    make = staticmethod(make)
    __swig_destroy__ = _isl_swig.delete_qpsk_recover_cc
    __del__ = lambda self: None
qpsk_recover_cc_swigregister = _isl_swig.qpsk_recover_cc_swigregister
qpsk_recover_cc_swigregister(qpsk_recover_cc)

def qpsk_recover_cc_make():
    """
    qpsk_recover_cc_make() -> qpsk_recover_cc_sptr

    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of isl::qpsk_recover_cc.

    To avoid accidental use of raw pointers, isl::qpsk_recover_cc's constructor is in a private implementation class. isl::qpsk_recover_cc::make is the public interface for creating new instances.
    """
    return _isl_swig.qpsk_recover_cc_make()

class qpsk_recover_cc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::isl::qpsk_recover_cc)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::isl::qpsk_recover_cc)> self) -> qpsk_recover_cc_sptr
        __init__(boost::shared_ptr<(gr::isl::qpsk_recover_cc)> self, qpsk_recover_cc p) -> qpsk_recover_cc_sptr
        """
        this = _isl_swig.new_qpsk_recover_cc_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(qpsk_recover_cc_sptr self) -> qpsk_recover_cc"""
        return _isl_swig.qpsk_recover_cc_sptr___deref__(self)

    __swig_destroy__ = _isl_swig.delete_qpsk_recover_cc_sptr
    __del__ = lambda self: None

    def make(self):
        """
        make(qpsk_recover_cc_sptr self) -> qpsk_recover_cc_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of isl::qpsk_recover_cc.

        To avoid accidental use of raw pointers, isl::qpsk_recover_cc's constructor is in a private implementation class. isl::qpsk_recover_cc::make is the public interface for creating new instances.
        """
        return _isl_swig.qpsk_recover_cc_sptr_make(self)


    def history(self):
        """history(qpsk_recover_cc_sptr self) -> unsigned int"""
        return _isl_swig.qpsk_recover_cc_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(qpsk_recover_cc_sptr self, int which, int delay)
        declare_sample_delay(qpsk_recover_cc_sptr self, unsigned int delay)
        """
        return _isl_swig.qpsk_recover_cc_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(qpsk_recover_cc_sptr self, int which) -> unsigned int"""
        return _isl_swig.qpsk_recover_cc_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(qpsk_recover_cc_sptr self) -> int"""
        return _isl_swig.qpsk_recover_cc_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(qpsk_recover_cc_sptr self) -> double"""
        return _isl_swig.qpsk_recover_cc_sptr_relative_rate(self)


    def start(self):
        """start(qpsk_recover_cc_sptr self) -> bool"""
        return _isl_swig.qpsk_recover_cc_sptr_start(self)


    def stop(self):
        """stop(qpsk_recover_cc_sptr self) -> bool"""
        return _isl_swig.qpsk_recover_cc_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(qpsk_recover_cc_sptr self, unsigned int which_input) -> uint64_t"""
        return _isl_swig.qpsk_recover_cc_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(qpsk_recover_cc_sptr self, unsigned int which_output) -> uint64_t"""
        return _isl_swig.qpsk_recover_cc_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(qpsk_recover_cc_sptr self) -> int"""
        return _isl_swig.qpsk_recover_cc_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(qpsk_recover_cc_sptr self, int m)"""
        return _isl_swig.qpsk_recover_cc_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(qpsk_recover_cc_sptr self)"""
        return _isl_swig.qpsk_recover_cc_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(qpsk_recover_cc_sptr self) -> bool"""
        return _isl_swig.qpsk_recover_cc_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(qpsk_recover_cc_sptr self, int m)"""
        return _isl_swig.qpsk_recover_cc_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(qpsk_recover_cc_sptr self) -> int"""
        return _isl_swig.qpsk_recover_cc_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(qpsk_recover_cc_sptr self, int i) -> long"""
        return _isl_swig.qpsk_recover_cc_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(qpsk_recover_cc_sptr self, long max_output_buffer)
        set_max_output_buffer(qpsk_recover_cc_sptr self, int port, long max_output_buffer)
        """
        return _isl_swig.qpsk_recover_cc_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(qpsk_recover_cc_sptr self, int i) -> long"""
        return _isl_swig.qpsk_recover_cc_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(qpsk_recover_cc_sptr self, long min_output_buffer)
        set_min_output_buffer(qpsk_recover_cc_sptr self, int port, long min_output_buffer)
        """
        return _isl_swig.qpsk_recover_cc_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(qpsk_recover_cc_sptr self) -> float"""
        return _isl_swig.qpsk_recover_cc_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(qpsk_recover_cc_sptr self) -> float"""
        return _isl_swig.qpsk_recover_cc_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(qpsk_recover_cc_sptr self) -> float"""
        return _isl_swig.qpsk_recover_cc_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(qpsk_recover_cc_sptr self) -> float"""
        return _isl_swig.qpsk_recover_cc_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(qpsk_recover_cc_sptr self) -> float"""
        return _isl_swig.qpsk_recover_cc_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(qpsk_recover_cc_sptr self) -> float"""
        return _isl_swig.qpsk_recover_cc_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(qpsk_recover_cc_sptr self, int which) -> float
        pc_input_buffers_full(qpsk_recover_cc_sptr self) -> pmt_vector_float
        """
        return _isl_swig.qpsk_recover_cc_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(qpsk_recover_cc_sptr self, int which) -> float
        pc_input_buffers_full_avg(qpsk_recover_cc_sptr self) -> pmt_vector_float
        """
        return _isl_swig.qpsk_recover_cc_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(qpsk_recover_cc_sptr self, int which) -> float
        pc_input_buffers_full_var(qpsk_recover_cc_sptr self) -> pmt_vector_float
        """
        return _isl_swig.qpsk_recover_cc_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(qpsk_recover_cc_sptr self, int which) -> float
        pc_output_buffers_full(qpsk_recover_cc_sptr self) -> pmt_vector_float
        """
        return _isl_swig.qpsk_recover_cc_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(qpsk_recover_cc_sptr self, int which) -> float
        pc_output_buffers_full_avg(qpsk_recover_cc_sptr self) -> pmt_vector_float
        """
        return _isl_swig.qpsk_recover_cc_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(qpsk_recover_cc_sptr self, int which) -> float
        pc_output_buffers_full_var(qpsk_recover_cc_sptr self) -> pmt_vector_float
        """
        return _isl_swig.qpsk_recover_cc_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(qpsk_recover_cc_sptr self) -> float"""
        return _isl_swig.qpsk_recover_cc_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(qpsk_recover_cc_sptr self) -> float"""
        return _isl_swig.qpsk_recover_cc_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(qpsk_recover_cc_sptr self) -> float"""
        return _isl_swig.qpsk_recover_cc_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(qpsk_recover_cc_sptr self) -> float"""
        return _isl_swig.qpsk_recover_cc_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(qpsk_recover_cc_sptr self) -> float"""
        return _isl_swig.qpsk_recover_cc_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(qpsk_recover_cc_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _isl_swig.qpsk_recover_cc_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(qpsk_recover_cc_sptr self)"""
        return _isl_swig.qpsk_recover_cc_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(qpsk_recover_cc_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _isl_swig.qpsk_recover_cc_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(qpsk_recover_cc_sptr self) -> int"""
        return _isl_swig.qpsk_recover_cc_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(qpsk_recover_cc_sptr self) -> int"""
        return _isl_swig.qpsk_recover_cc_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(qpsk_recover_cc_sptr self, int priority) -> int"""
        return _isl_swig.qpsk_recover_cc_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(qpsk_recover_cc_sptr self) -> std::string"""
        return _isl_swig.qpsk_recover_cc_sptr_name(self)


    def symbol_name(self):
        """symbol_name(qpsk_recover_cc_sptr self) -> std::string"""
        return _isl_swig.qpsk_recover_cc_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(qpsk_recover_cc_sptr self) -> io_signature_sptr"""
        return _isl_swig.qpsk_recover_cc_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(qpsk_recover_cc_sptr self) -> io_signature_sptr"""
        return _isl_swig.qpsk_recover_cc_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(qpsk_recover_cc_sptr self) -> long"""
        return _isl_swig.qpsk_recover_cc_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(qpsk_recover_cc_sptr self) -> basic_block_sptr"""
        return _isl_swig.qpsk_recover_cc_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(qpsk_recover_cc_sptr self, int ninputs, int noutputs) -> bool"""
        return _isl_swig.qpsk_recover_cc_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(qpsk_recover_cc_sptr self) -> std::string"""
        return _isl_swig.qpsk_recover_cc_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(qpsk_recover_cc_sptr self, std::string name)"""
        return _isl_swig.qpsk_recover_cc_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(qpsk_recover_cc_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _isl_swig.qpsk_recover_cc_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(qpsk_recover_cc_sptr self) -> swig_int_ptr"""
        return _isl_swig.qpsk_recover_cc_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(qpsk_recover_cc_sptr self) -> swig_int_ptr"""
        return _isl_swig.qpsk_recover_cc_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(qpsk_recover_cc_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _isl_swig.qpsk_recover_cc_sptr_message_subscribers(self, which_port)

qpsk_recover_cc_sptr_swigregister = _isl_swig.qpsk_recover_cc_sptr_swigregister
qpsk_recover_cc_sptr_swigregister(qpsk_recover_cc_sptr)


qpsk_recover_cc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
qpsk_recover_cc = qpsk_recover_cc.make;

class fir_interpolator_ff(object):
    """
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of isl::fir_interpolator_ff.

    To avoid accidental use of raw pointers, isl::fir_interpolator_ff's constructor is in a private implementation class. isl::fir_interpolator_ff::make is the public interface for creating new instances.

    Args:
        interpolation : 
        taps : 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(interpolation, taps):
        """
        make(int interpolation, pmt_vector_float taps) -> fir_interpolator_ff_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of isl::fir_interpolator_ff.

        To avoid accidental use of raw pointers, isl::fir_interpolator_ff's constructor is in a private implementation class. isl::fir_interpolator_ff::make is the public interface for creating new instances.

        Args:
            interpolation : 
            taps : 
        """
        return _isl_swig.fir_interpolator_ff_make(interpolation, taps)

    make = staticmethod(make)
    __swig_destroy__ = _isl_swig.delete_fir_interpolator_ff
    __del__ = lambda self: None
fir_interpolator_ff_swigregister = _isl_swig.fir_interpolator_ff_swigregister
fir_interpolator_ff_swigregister(fir_interpolator_ff)

def fir_interpolator_ff_make(interpolation, taps):
    """
    fir_interpolator_ff_make(int interpolation, pmt_vector_float taps) -> fir_interpolator_ff_sptr

    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of isl::fir_interpolator_ff.

    To avoid accidental use of raw pointers, isl::fir_interpolator_ff's constructor is in a private implementation class. isl::fir_interpolator_ff::make is the public interface for creating new instances.

    Args:
        interpolation : 
        taps : 
    """
    return _isl_swig.fir_interpolator_ff_make(interpolation, taps)

class fir_interpolator_ff_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::isl::fir_interpolator_ff)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::isl::fir_interpolator_ff)> self) -> fir_interpolator_ff_sptr
        __init__(boost::shared_ptr<(gr::isl::fir_interpolator_ff)> self, fir_interpolator_ff p) -> fir_interpolator_ff_sptr
        """
        this = _isl_swig.new_fir_interpolator_ff_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(fir_interpolator_ff_sptr self) -> fir_interpolator_ff"""
        return _isl_swig.fir_interpolator_ff_sptr___deref__(self)

    __swig_destroy__ = _isl_swig.delete_fir_interpolator_ff_sptr
    __del__ = lambda self: None

    def make(self, interpolation, taps):
        """
        make(fir_interpolator_ff_sptr self, int interpolation, pmt_vector_float taps) -> fir_interpolator_ff_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of isl::fir_interpolator_ff.

        To avoid accidental use of raw pointers, isl::fir_interpolator_ff's constructor is in a private implementation class. isl::fir_interpolator_ff::make is the public interface for creating new instances.

        Args:
            interpolation : 
            taps : 
        """
        return _isl_swig.fir_interpolator_ff_sptr_make(self, interpolation, taps)


    def history(self):
        """history(fir_interpolator_ff_sptr self) -> unsigned int"""
        return _isl_swig.fir_interpolator_ff_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(fir_interpolator_ff_sptr self, int which, int delay)
        declare_sample_delay(fir_interpolator_ff_sptr self, unsigned int delay)
        """
        return _isl_swig.fir_interpolator_ff_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(fir_interpolator_ff_sptr self, int which) -> unsigned int"""
        return _isl_swig.fir_interpolator_ff_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(fir_interpolator_ff_sptr self) -> int"""
        return _isl_swig.fir_interpolator_ff_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(fir_interpolator_ff_sptr self) -> double"""
        return _isl_swig.fir_interpolator_ff_sptr_relative_rate(self)


    def start(self):
        """start(fir_interpolator_ff_sptr self) -> bool"""
        return _isl_swig.fir_interpolator_ff_sptr_start(self)


    def stop(self):
        """stop(fir_interpolator_ff_sptr self) -> bool"""
        return _isl_swig.fir_interpolator_ff_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(fir_interpolator_ff_sptr self, unsigned int which_input) -> uint64_t"""
        return _isl_swig.fir_interpolator_ff_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(fir_interpolator_ff_sptr self, unsigned int which_output) -> uint64_t"""
        return _isl_swig.fir_interpolator_ff_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(fir_interpolator_ff_sptr self) -> int"""
        return _isl_swig.fir_interpolator_ff_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(fir_interpolator_ff_sptr self, int m)"""
        return _isl_swig.fir_interpolator_ff_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(fir_interpolator_ff_sptr self)"""
        return _isl_swig.fir_interpolator_ff_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(fir_interpolator_ff_sptr self) -> bool"""
        return _isl_swig.fir_interpolator_ff_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(fir_interpolator_ff_sptr self, int m)"""
        return _isl_swig.fir_interpolator_ff_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(fir_interpolator_ff_sptr self) -> int"""
        return _isl_swig.fir_interpolator_ff_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(fir_interpolator_ff_sptr self, int i) -> long"""
        return _isl_swig.fir_interpolator_ff_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(fir_interpolator_ff_sptr self, long max_output_buffer)
        set_max_output_buffer(fir_interpolator_ff_sptr self, int port, long max_output_buffer)
        """
        return _isl_swig.fir_interpolator_ff_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(fir_interpolator_ff_sptr self, int i) -> long"""
        return _isl_swig.fir_interpolator_ff_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(fir_interpolator_ff_sptr self, long min_output_buffer)
        set_min_output_buffer(fir_interpolator_ff_sptr self, int port, long min_output_buffer)
        """
        return _isl_swig.fir_interpolator_ff_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(fir_interpolator_ff_sptr self) -> float"""
        return _isl_swig.fir_interpolator_ff_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(fir_interpolator_ff_sptr self) -> float"""
        return _isl_swig.fir_interpolator_ff_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(fir_interpolator_ff_sptr self) -> float"""
        return _isl_swig.fir_interpolator_ff_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(fir_interpolator_ff_sptr self) -> float"""
        return _isl_swig.fir_interpolator_ff_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(fir_interpolator_ff_sptr self) -> float"""
        return _isl_swig.fir_interpolator_ff_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(fir_interpolator_ff_sptr self) -> float"""
        return _isl_swig.fir_interpolator_ff_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(fir_interpolator_ff_sptr self, int which) -> float
        pc_input_buffers_full(fir_interpolator_ff_sptr self) -> pmt_vector_float
        """
        return _isl_swig.fir_interpolator_ff_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(fir_interpolator_ff_sptr self, int which) -> float
        pc_input_buffers_full_avg(fir_interpolator_ff_sptr self) -> pmt_vector_float
        """
        return _isl_swig.fir_interpolator_ff_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(fir_interpolator_ff_sptr self, int which) -> float
        pc_input_buffers_full_var(fir_interpolator_ff_sptr self) -> pmt_vector_float
        """
        return _isl_swig.fir_interpolator_ff_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(fir_interpolator_ff_sptr self, int which) -> float
        pc_output_buffers_full(fir_interpolator_ff_sptr self) -> pmt_vector_float
        """
        return _isl_swig.fir_interpolator_ff_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(fir_interpolator_ff_sptr self, int which) -> float
        pc_output_buffers_full_avg(fir_interpolator_ff_sptr self) -> pmt_vector_float
        """
        return _isl_swig.fir_interpolator_ff_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(fir_interpolator_ff_sptr self, int which) -> float
        pc_output_buffers_full_var(fir_interpolator_ff_sptr self) -> pmt_vector_float
        """
        return _isl_swig.fir_interpolator_ff_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(fir_interpolator_ff_sptr self) -> float"""
        return _isl_swig.fir_interpolator_ff_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(fir_interpolator_ff_sptr self) -> float"""
        return _isl_swig.fir_interpolator_ff_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(fir_interpolator_ff_sptr self) -> float"""
        return _isl_swig.fir_interpolator_ff_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(fir_interpolator_ff_sptr self) -> float"""
        return _isl_swig.fir_interpolator_ff_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(fir_interpolator_ff_sptr self) -> float"""
        return _isl_swig.fir_interpolator_ff_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(fir_interpolator_ff_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _isl_swig.fir_interpolator_ff_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(fir_interpolator_ff_sptr self)"""
        return _isl_swig.fir_interpolator_ff_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(fir_interpolator_ff_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _isl_swig.fir_interpolator_ff_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(fir_interpolator_ff_sptr self) -> int"""
        return _isl_swig.fir_interpolator_ff_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(fir_interpolator_ff_sptr self) -> int"""
        return _isl_swig.fir_interpolator_ff_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(fir_interpolator_ff_sptr self, int priority) -> int"""
        return _isl_swig.fir_interpolator_ff_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(fir_interpolator_ff_sptr self) -> std::string"""
        return _isl_swig.fir_interpolator_ff_sptr_name(self)


    def symbol_name(self):
        """symbol_name(fir_interpolator_ff_sptr self) -> std::string"""
        return _isl_swig.fir_interpolator_ff_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(fir_interpolator_ff_sptr self) -> io_signature_sptr"""
        return _isl_swig.fir_interpolator_ff_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(fir_interpolator_ff_sptr self) -> io_signature_sptr"""
        return _isl_swig.fir_interpolator_ff_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(fir_interpolator_ff_sptr self) -> long"""
        return _isl_swig.fir_interpolator_ff_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(fir_interpolator_ff_sptr self) -> basic_block_sptr"""
        return _isl_swig.fir_interpolator_ff_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(fir_interpolator_ff_sptr self, int ninputs, int noutputs) -> bool"""
        return _isl_swig.fir_interpolator_ff_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(fir_interpolator_ff_sptr self) -> std::string"""
        return _isl_swig.fir_interpolator_ff_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(fir_interpolator_ff_sptr self, std::string name)"""
        return _isl_swig.fir_interpolator_ff_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(fir_interpolator_ff_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _isl_swig.fir_interpolator_ff_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(fir_interpolator_ff_sptr self) -> swig_int_ptr"""
        return _isl_swig.fir_interpolator_ff_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(fir_interpolator_ff_sptr self) -> swig_int_ptr"""
        return _isl_swig.fir_interpolator_ff_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(fir_interpolator_ff_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _isl_swig.fir_interpolator_ff_sptr_message_subscribers(self, which_port)

fir_interpolator_ff_sptr_swigregister = _isl_swig.fir_interpolator_ff_sptr_swigregister
fir_interpolator_ff_sptr_swigregister(fir_interpolator_ff_sptr)


fir_interpolator_ff_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
fir_interpolator_ff = fir_interpolator_ff.make;

class vector_get_element_ff(object):
    """
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of isl::vector_get_element_ff.

    To avoid accidental use of raw pointers, isl::vector_get_element_ff's constructor is in a private implementation class. isl::vector_get_element_ff::make is the public interface for creating new instances.

    Args:
        vector_length : 
        location : 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(vector_length, location):
        """
        make(int vector_length, int location) -> vector_get_element_ff_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of isl::vector_get_element_ff.

        To avoid accidental use of raw pointers, isl::vector_get_element_ff's constructor is in a private implementation class. isl::vector_get_element_ff::make is the public interface for creating new instances.

        Args:
            vector_length : 
            location : 
        """
        return _isl_swig.vector_get_element_ff_make(vector_length, location)

    make = staticmethod(make)
    __swig_destroy__ = _isl_swig.delete_vector_get_element_ff
    __del__ = lambda self: None
vector_get_element_ff_swigregister = _isl_swig.vector_get_element_ff_swigregister
vector_get_element_ff_swigregister(vector_get_element_ff)

def vector_get_element_ff_make(vector_length, location):
    """
    vector_get_element_ff_make(int vector_length, int location) -> vector_get_element_ff_sptr

    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of isl::vector_get_element_ff.

    To avoid accidental use of raw pointers, isl::vector_get_element_ff's constructor is in a private implementation class. isl::vector_get_element_ff::make is the public interface for creating new instances.

    Args:
        vector_length : 
        location : 
    """
    return _isl_swig.vector_get_element_ff_make(vector_length, location)

class vector_get_element_ff_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::isl::vector_get_element_ff)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::isl::vector_get_element_ff)> self) -> vector_get_element_ff_sptr
        __init__(boost::shared_ptr<(gr::isl::vector_get_element_ff)> self, vector_get_element_ff p) -> vector_get_element_ff_sptr
        """
        this = _isl_swig.new_vector_get_element_ff_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(vector_get_element_ff_sptr self) -> vector_get_element_ff"""
        return _isl_swig.vector_get_element_ff_sptr___deref__(self)

    __swig_destroy__ = _isl_swig.delete_vector_get_element_ff_sptr
    __del__ = lambda self: None

    def make(self, vector_length, location):
        """
        make(vector_get_element_ff_sptr self, int vector_length, int location) -> vector_get_element_ff_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of isl::vector_get_element_ff.

        To avoid accidental use of raw pointers, isl::vector_get_element_ff's constructor is in a private implementation class. isl::vector_get_element_ff::make is the public interface for creating new instances.

        Args:
            vector_length : 
            location : 
        """
        return _isl_swig.vector_get_element_ff_sptr_make(self, vector_length, location)


    def history(self):
        """history(vector_get_element_ff_sptr self) -> unsigned int"""
        return _isl_swig.vector_get_element_ff_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(vector_get_element_ff_sptr self, int which, int delay)
        declare_sample_delay(vector_get_element_ff_sptr self, unsigned int delay)
        """
        return _isl_swig.vector_get_element_ff_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(vector_get_element_ff_sptr self, int which) -> unsigned int"""
        return _isl_swig.vector_get_element_ff_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(vector_get_element_ff_sptr self) -> int"""
        return _isl_swig.vector_get_element_ff_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(vector_get_element_ff_sptr self) -> double"""
        return _isl_swig.vector_get_element_ff_sptr_relative_rate(self)


    def start(self):
        """start(vector_get_element_ff_sptr self) -> bool"""
        return _isl_swig.vector_get_element_ff_sptr_start(self)


    def stop(self):
        """stop(vector_get_element_ff_sptr self) -> bool"""
        return _isl_swig.vector_get_element_ff_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(vector_get_element_ff_sptr self, unsigned int which_input) -> uint64_t"""
        return _isl_swig.vector_get_element_ff_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(vector_get_element_ff_sptr self, unsigned int which_output) -> uint64_t"""
        return _isl_swig.vector_get_element_ff_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(vector_get_element_ff_sptr self) -> int"""
        return _isl_swig.vector_get_element_ff_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(vector_get_element_ff_sptr self, int m)"""
        return _isl_swig.vector_get_element_ff_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(vector_get_element_ff_sptr self)"""
        return _isl_swig.vector_get_element_ff_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(vector_get_element_ff_sptr self) -> bool"""
        return _isl_swig.vector_get_element_ff_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(vector_get_element_ff_sptr self, int m)"""
        return _isl_swig.vector_get_element_ff_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(vector_get_element_ff_sptr self) -> int"""
        return _isl_swig.vector_get_element_ff_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(vector_get_element_ff_sptr self, int i) -> long"""
        return _isl_swig.vector_get_element_ff_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(vector_get_element_ff_sptr self, long max_output_buffer)
        set_max_output_buffer(vector_get_element_ff_sptr self, int port, long max_output_buffer)
        """
        return _isl_swig.vector_get_element_ff_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(vector_get_element_ff_sptr self, int i) -> long"""
        return _isl_swig.vector_get_element_ff_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(vector_get_element_ff_sptr self, long min_output_buffer)
        set_min_output_buffer(vector_get_element_ff_sptr self, int port, long min_output_buffer)
        """
        return _isl_swig.vector_get_element_ff_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(vector_get_element_ff_sptr self) -> float"""
        return _isl_swig.vector_get_element_ff_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(vector_get_element_ff_sptr self) -> float"""
        return _isl_swig.vector_get_element_ff_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(vector_get_element_ff_sptr self) -> float"""
        return _isl_swig.vector_get_element_ff_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(vector_get_element_ff_sptr self) -> float"""
        return _isl_swig.vector_get_element_ff_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(vector_get_element_ff_sptr self) -> float"""
        return _isl_swig.vector_get_element_ff_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(vector_get_element_ff_sptr self) -> float"""
        return _isl_swig.vector_get_element_ff_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(vector_get_element_ff_sptr self, int which) -> float
        pc_input_buffers_full(vector_get_element_ff_sptr self) -> pmt_vector_float
        """
        return _isl_swig.vector_get_element_ff_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(vector_get_element_ff_sptr self, int which) -> float
        pc_input_buffers_full_avg(vector_get_element_ff_sptr self) -> pmt_vector_float
        """
        return _isl_swig.vector_get_element_ff_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(vector_get_element_ff_sptr self, int which) -> float
        pc_input_buffers_full_var(vector_get_element_ff_sptr self) -> pmt_vector_float
        """
        return _isl_swig.vector_get_element_ff_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(vector_get_element_ff_sptr self, int which) -> float
        pc_output_buffers_full(vector_get_element_ff_sptr self) -> pmt_vector_float
        """
        return _isl_swig.vector_get_element_ff_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(vector_get_element_ff_sptr self, int which) -> float
        pc_output_buffers_full_avg(vector_get_element_ff_sptr self) -> pmt_vector_float
        """
        return _isl_swig.vector_get_element_ff_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(vector_get_element_ff_sptr self, int which) -> float
        pc_output_buffers_full_var(vector_get_element_ff_sptr self) -> pmt_vector_float
        """
        return _isl_swig.vector_get_element_ff_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(vector_get_element_ff_sptr self) -> float"""
        return _isl_swig.vector_get_element_ff_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(vector_get_element_ff_sptr self) -> float"""
        return _isl_swig.vector_get_element_ff_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(vector_get_element_ff_sptr self) -> float"""
        return _isl_swig.vector_get_element_ff_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(vector_get_element_ff_sptr self) -> float"""
        return _isl_swig.vector_get_element_ff_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(vector_get_element_ff_sptr self) -> float"""
        return _isl_swig.vector_get_element_ff_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(vector_get_element_ff_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _isl_swig.vector_get_element_ff_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(vector_get_element_ff_sptr self)"""
        return _isl_swig.vector_get_element_ff_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(vector_get_element_ff_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _isl_swig.vector_get_element_ff_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(vector_get_element_ff_sptr self) -> int"""
        return _isl_swig.vector_get_element_ff_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(vector_get_element_ff_sptr self) -> int"""
        return _isl_swig.vector_get_element_ff_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(vector_get_element_ff_sptr self, int priority) -> int"""
        return _isl_swig.vector_get_element_ff_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(vector_get_element_ff_sptr self) -> std::string"""
        return _isl_swig.vector_get_element_ff_sptr_name(self)


    def symbol_name(self):
        """symbol_name(vector_get_element_ff_sptr self) -> std::string"""
        return _isl_swig.vector_get_element_ff_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(vector_get_element_ff_sptr self) -> io_signature_sptr"""
        return _isl_swig.vector_get_element_ff_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(vector_get_element_ff_sptr self) -> io_signature_sptr"""
        return _isl_swig.vector_get_element_ff_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(vector_get_element_ff_sptr self) -> long"""
        return _isl_swig.vector_get_element_ff_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(vector_get_element_ff_sptr self) -> basic_block_sptr"""
        return _isl_swig.vector_get_element_ff_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(vector_get_element_ff_sptr self, int ninputs, int noutputs) -> bool"""
        return _isl_swig.vector_get_element_ff_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(vector_get_element_ff_sptr self) -> std::string"""
        return _isl_swig.vector_get_element_ff_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(vector_get_element_ff_sptr self, std::string name)"""
        return _isl_swig.vector_get_element_ff_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(vector_get_element_ff_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _isl_swig.vector_get_element_ff_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(vector_get_element_ff_sptr self) -> swig_int_ptr"""
        return _isl_swig.vector_get_element_ff_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(vector_get_element_ff_sptr self) -> swig_int_ptr"""
        return _isl_swig.vector_get_element_ff_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(vector_get_element_ff_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _isl_swig.vector_get_element_ff_sptr_message_subscribers(self, which_port)

vector_get_element_ff_sptr_swigregister = _isl_swig.vector_get_element_ff_sptr_swigregister
vector_get_element_ff_sptr_swigregister(vector_get_element_ff_sptr)


vector_get_element_ff_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
vector_get_element_ff = vector_get_element_ff.make;



