# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_isl_swig', [dirname(__file__)])
        except ImportError:
            import _isl_swig
            return _isl_swig
        if fp is not None:
            try:
                _mod = imp.load_module('_isl_swig', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _isl_swig = swig_import_helper()
    del swig_import_helper
else:
    import _isl_swig
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr



def high_res_timer_now():
    """high_res_timer_now() -> gr::high_res_timer_type"""
    return _isl_swig.high_res_timer_now()

def high_res_timer_now_perfmon():
    """high_res_timer_now_perfmon() -> gr::high_res_timer_type"""
    return _isl_swig.high_res_timer_now_perfmon()

def high_res_timer_tps():
    """high_res_timer_tps() -> gr::high_res_timer_type"""
    return _isl_swig.high_res_timer_tps()

def high_res_timer_epoch():
    """high_res_timer_epoch() -> gr::high_res_timer_type"""
    return _isl_swig.high_res_timer_epoch()
class pn_generate_i(object):
    """
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of isl::pn_generate_i.

    To avoid accidental use of raw pointers, isl::pn_generate_i's constructor is in a private implementation class. isl::pn_generate_i::make is the public interface for creating new instances.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make():
        """
        make() -> pn_generate_i_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of isl::pn_generate_i.

        To avoid accidental use of raw pointers, isl::pn_generate_i's constructor is in a private implementation class. isl::pn_generate_i::make is the public interface for creating new instances.
        """
        return _isl_swig.pn_generate_i_make()

    make = staticmethod(make)
    __swig_destroy__ = _isl_swig.delete_pn_generate_i
    __del__ = lambda self: None
pn_generate_i_swigregister = _isl_swig.pn_generate_i_swigregister
pn_generate_i_swigregister(pn_generate_i)

def pn_generate_i_make():
    """
    pn_generate_i_make() -> pn_generate_i_sptr

    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of isl::pn_generate_i.

    To avoid accidental use of raw pointers, isl::pn_generate_i's constructor is in a private implementation class. isl::pn_generate_i::make is the public interface for creating new instances.
    """
    return _isl_swig.pn_generate_i_make()

class pn_generate_i_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::isl::pn_generate_i)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::isl::pn_generate_i)> self) -> pn_generate_i_sptr
        __init__(boost::shared_ptr<(gr::isl::pn_generate_i)> self, pn_generate_i p) -> pn_generate_i_sptr
        """
        this = _isl_swig.new_pn_generate_i_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(pn_generate_i_sptr self) -> pn_generate_i"""
        return _isl_swig.pn_generate_i_sptr___deref__(self)

    __swig_destroy__ = _isl_swig.delete_pn_generate_i_sptr
    __del__ = lambda self: None

    def make(self):
        """
        make(pn_generate_i_sptr self) -> pn_generate_i_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of isl::pn_generate_i.

        To avoid accidental use of raw pointers, isl::pn_generate_i's constructor is in a private implementation class. isl::pn_generate_i::make is the public interface for creating new instances.
        """
        return _isl_swig.pn_generate_i_sptr_make(self)


    def history(self):
        """history(pn_generate_i_sptr self) -> unsigned int"""
        return _isl_swig.pn_generate_i_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(pn_generate_i_sptr self, int which, int delay)
        declare_sample_delay(pn_generate_i_sptr self, unsigned int delay)
        """
        return _isl_swig.pn_generate_i_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(pn_generate_i_sptr self, int which) -> unsigned int"""
        return _isl_swig.pn_generate_i_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(pn_generate_i_sptr self) -> int"""
        return _isl_swig.pn_generate_i_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(pn_generate_i_sptr self) -> double"""
        return _isl_swig.pn_generate_i_sptr_relative_rate(self)


    def start(self):
        """start(pn_generate_i_sptr self) -> bool"""
        return _isl_swig.pn_generate_i_sptr_start(self)


    def stop(self):
        """stop(pn_generate_i_sptr self) -> bool"""
        return _isl_swig.pn_generate_i_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(pn_generate_i_sptr self, unsigned int which_input) -> uint64_t"""
        return _isl_swig.pn_generate_i_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(pn_generate_i_sptr self, unsigned int which_output) -> uint64_t"""
        return _isl_swig.pn_generate_i_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(pn_generate_i_sptr self) -> int"""
        return _isl_swig.pn_generate_i_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(pn_generate_i_sptr self, int m)"""
        return _isl_swig.pn_generate_i_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(pn_generate_i_sptr self)"""
        return _isl_swig.pn_generate_i_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(pn_generate_i_sptr self) -> bool"""
        return _isl_swig.pn_generate_i_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(pn_generate_i_sptr self, int m)"""
        return _isl_swig.pn_generate_i_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(pn_generate_i_sptr self) -> int"""
        return _isl_swig.pn_generate_i_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(pn_generate_i_sptr self, int i) -> long"""
        return _isl_swig.pn_generate_i_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(pn_generate_i_sptr self, long max_output_buffer)
        set_max_output_buffer(pn_generate_i_sptr self, int port, long max_output_buffer)
        """
        return _isl_swig.pn_generate_i_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(pn_generate_i_sptr self, int i) -> long"""
        return _isl_swig.pn_generate_i_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(pn_generate_i_sptr self, long min_output_buffer)
        set_min_output_buffer(pn_generate_i_sptr self, int port, long min_output_buffer)
        """
        return _isl_swig.pn_generate_i_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(pn_generate_i_sptr self) -> float"""
        return _isl_swig.pn_generate_i_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(pn_generate_i_sptr self) -> float"""
        return _isl_swig.pn_generate_i_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(pn_generate_i_sptr self) -> float"""
        return _isl_swig.pn_generate_i_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(pn_generate_i_sptr self) -> float"""
        return _isl_swig.pn_generate_i_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(pn_generate_i_sptr self) -> float"""
        return _isl_swig.pn_generate_i_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(pn_generate_i_sptr self) -> float"""
        return _isl_swig.pn_generate_i_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(pn_generate_i_sptr self, int which) -> float
        pc_input_buffers_full(pn_generate_i_sptr self) -> pmt_vector_float
        """
        return _isl_swig.pn_generate_i_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(pn_generate_i_sptr self, int which) -> float
        pc_input_buffers_full_avg(pn_generate_i_sptr self) -> pmt_vector_float
        """
        return _isl_swig.pn_generate_i_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(pn_generate_i_sptr self, int which) -> float
        pc_input_buffers_full_var(pn_generate_i_sptr self) -> pmt_vector_float
        """
        return _isl_swig.pn_generate_i_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(pn_generate_i_sptr self, int which) -> float
        pc_output_buffers_full(pn_generate_i_sptr self) -> pmt_vector_float
        """
        return _isl_swig.pn_generate_i_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(pn_generate_i_sptr self, int which) -> float
        pc_output_buffers_full_avg(pn_generate_i_sptr self) -> pmt_vector_float
        """
        return _isl_swig.pn_generate_i_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(pn_generate_i_sptr self, int which) -> float
        pc_output_buffers_full_var(pn_generate_i_sptr self) -> pmt_vector_float
        """
        return _isl_swig.pn_generate_i_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(pn_generate_i_sptr self) -> float"""
        return _isl_swig.pn_generate_i_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(pn_generate_i_sptr self) -> float"""
        return _isl_swig.pn_generate_i_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(pn_generate_i_sptr self) -> float"""
        return _isl_swig.pn_generate_i_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(pn_generate_i_sptr self) -> float"""
        return _isl_swig.pn_generate_i_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(pn_generate_i_sptr self) -> float"""
        return _isl_swig.pn_generate_i_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(pn_generate_i_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _isl_swig.pn_generate_i_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(pn_generate_i_sptr self)"""
        return _isl_swig.pn_generate_i_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(pn_generate_i_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _isl_swig.pn_generate_i_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(pn_generate_i_sptr self) -> int"""
        return _isl_swig.pn_generate_i_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(pn_generate_i_sptr self) -> int"""
        return _isl_swig.pn_generate_i_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(pn_generate_i_sptr self, int priority) -> int"""
        return _isl_swig.pn_generate_i_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(pn_generate_i_sptr self) -> std::string"""
        return _isl_swig.pn_generate_i_sptr_name(self)


    def symbol_name(self):
        """symbol_name(pn_generate_i_sptr self) -> std::string"""
        return _isl_swig.pn_generate_i_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(pn_generate_i_sptr self) -> io_signature_sptr"""
        return _isl_swig.pn_generate_i_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(pn_generate_i_sptr self) -> io_signature_sptr"""
        return _isl_swig.pn_generate_i_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(pn_generate_i_sptr self) -> long"""
        return _isl_swig.pn_generate_i_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(pn_generate_i_sptr self) -> basic_block_sptr"""
        return _isl_swig.pn_generate_i_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(pn_generate_i_sptr self, int ninputs, int noutputs) -> bool"""
        return _isl_swig.pn_generate_i_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(pn_generate_i_sptr self) -> std::string"""
        return _isl_swig.pn_generate_i_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(pn_generate_i_sptr self, std::string name)"""
        return _isl_swig.pn_generate_i_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(pn_generate_i_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _isl_swig.pn_generate_i_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(pn_generate_i_sptr self) -> swig_int_ptr"""
        return _isl_swig.pn_generate_i_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(pn_generate_i_sptr self) -> swig_int_ptr"""
        return _isl_swig.pn_generate_i_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(pn_generate_i_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _isl_swig.pn_generate_i_sptr_message_subscribers(self, which_port)

pn_generate_i_sptr_swigregister = _isl_swig.pn_generate_i_sptr_swigregister
pn_generate_i_sptr_swigregister(pn_generate_i_sptr)


pn_generate_i_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
pn_generate_i = pn_generate_i.make;

class pmod(object):
    """
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of isl::pmod.

    To avoid accidental use of raw pointers, isl::pmod's constructor is in a private implementation class. isl::pmod::make is the public interface for creating new instances.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make():
        """
        make() -> pmod_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of isl::pmod.

        To avoid accidental use of raw pointers, isl::pmod's constructor is in a private implementation class. isl::pmod::make is the public interface for creating new instances.
        """
        return _isl_swig.pmod_make()

    make = staticmethod(make)
    __swig_destroy__ = _isl_swig.delete_pmod
    __del__ = lambda self: None
pmod_swigregister = _isl_swig.pmod_swigregister
pmod_swigregister(pmod)

def pmod_make():
    """
    pmod_make() -> pmod_sptr

    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of isl::pmod.

    To avoid accidental use of raw pointers, isl::pmod's constructor is in a private implementation class. isl::pmod::make is the public interface for creating new instances.
    """
    return _isl_swig.pmod_make()

class pmod_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::isl::pmod)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::isl::pmod)> self) -> pmod_sptr
        __init__(boost::shared_ptr<(gr::isl::pmod)> self, pmod p) -> pmod_sptr
        """
        this = _isl_swig.new_pmod_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(pmod_sptr self) -> pmod"""
        return _isl_swig.pmod_sptr___deref__(self)

    __swig_destroy__ = _isl_swig.delete_pmod_sptr
    __del__ = lambda self: None

    def make(self):
        """
        make(pmod_sptr self) -> pmod_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of isl::pmod.

        To avoid accidental use of raw pointers, isl::pmod's constructor is in a private implementation class. isl::pmod::make is the public interface for creating new instances.
        """
        return _isl_swig.pmod_sptr_make(self)


    def history(self):
        """history(pmod_sptr self) -> unsigned int"""
        return _isl_swig.pmod_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(pmod_sptr self, int which, int delay)
        declare_sample_delay(pmod_sptr self, unsigned int delay)
        """
        return _isl_swig.pmod_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(pmod_sptr self, int which) -> unsigned int"""
        return _isl_swig.pmod_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(pmod_sptr self) -> int"""
        return _isl_swig.pmod_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(pmod_sptr self) -> double"""
        return _isl_swig.pmod_sptr_relative_rate(self)


    def start(self):
        """start(pmod_sptr self) -> bool"""
        return _isl_swig.pmod_sptr_start(self)


    def stop(self):
        """stop(pmod_sptr self) -> bool"""
        return _isl_swig.pmod_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(pmod_sptr self, unsigned int which_input) -> uint64_t"""
        return _isl_swig.pmod_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(pmod_sptr self, unsigned int which_output) -> uint64_t"""
        return _isl_swig.pmod_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(pmod_sptr self) -> int"""
        return _isl_swig.pmod_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(pmod_sptr self, int m)"""
        return _isl_swig.pmod_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(pmod_sptr self)"""
        return _isl_swig.pmod_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(pmod_sptr self) -> bool"""
        return _isl_swig.pmod_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(pmod_sptr self, int m)"""
        return _isl_swig.pmod_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(pmod_sptr self) -> int"""
        return _isl_swig.pmod_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(pmod_sptr self, int i) -> long"""
        return _isl_swig.pmod_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(pmod_sptr self, long max_output_buffer)
        set_max_output_buffer(pmod_sptr self, int port, long max_output_buffer)
        """
        return _isl_swig.pmod_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(pmod_sptr self, int i) -> long"""
        return _isl_swig.pmod_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(pmod_sptr self, long min_output_buffer)
        set_min_output_buffer(pmod_sptr self, int port, long min_output_buffer)
        """
        return _isl_swig.pmod_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(pmod_sptr self) -> float"""
        return _isl_swig.pmod_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(pmod_sptr self) -> float"""
        return _isl_swig.pmod_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(pmod_sptr self) -> float"""
        return _isl_swig.pmod_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(pmod_sptr self) -> float"""
        return _isl_swig.pmod_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(pmod_sptr self) -> float"""
        return _isl_swig.pmod_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(pmod_sptr self) -> float"""
        return _isl_swig.pmod_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(pmod_sptr self, int which) -> float
        pc_input_buffers_full(pmod_sptr self) -> pmt_vector_float
        """
        return _isl_swig.pmod_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(pmod_sptr self, int which) -> float
        pc_input_buffers_full_avg(pmod_sptr self) -> pmt_vector_float
        """
        return _isl_swig.pmod_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(pmod_sptr self, int which) -> float
        pc_input_buffers_full_var(pmod_sptr self) -> pmt_vector_float
        """
        return _isl_swig.pmod_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(pmod_sptr self, int which) -> float
        pc_output_buffers_full(pmod_sptr self) -> pmt_vector_float
        """
        return _isl_swig.pmod_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(pmod_sptr self, int which) -> float
        pc_output_buffers_full_avg(pmod_sptr self) -> pmt_vector_float
        """
        return _isl_swig.pmod_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(pmod_sptr self, int which) -> float
        pc_output_buffers_full_var(pmod_sptr self) -> pmt_vector_float
        """
        return _isl_swig.pmod_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(pmod_sptr self) -> float"""
        return _isl_swig.pmod_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(pmod_sptr self) -> float"""
        return _isl_swig.pmod_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(pmod_sptr self) -> float"""
        return _isl_swig.pmod_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(pmod_sptr self) -> float"""
        return _isl_swig.pmod_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(pmod_sptr self) -> float"""
        return _isl_swig.pmod_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(pmod_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _isl_swig.pmod_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(pmod_sptr self)"""
        return _isl_swig.pmod_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(pmod_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _isl_swig.pmod_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(pmod_sptr self) -> int"""
        return _isl_swig.pmod_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(pmod_sptr self) -> int"""
        return _isl_swig.pmod_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(pmod_sptr self, int priority) -> int"""
        return _isl_swig.pmod_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(pmod_sptr self) -> std::string"""
        return _isl_swig.pmod_sptr_name(self)


    def symbol_name(self):
        """symbol_name(pmod_sptr self) -> std::string"""
        return _isl_swig.pmod_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(pmod_sptr self) -> io_signature_sptr"""
        return _isl_swig.pmod_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(pmod_sptr self) -> io_signature_sptr"""
        return _isl_swig.pmod_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(pmod_sptr self) -> long"""
        return _isl_swig.pmod_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(pmod_sptr self) -> basic_block_sptr"""
        return _isl_swig.pmod_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(pmod_sptr self, int ninputs, int noutputs) -> bool"""
        return _isl_swig.pmod_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(pmod_sptr self) -> std::string"""
        return _isl_swig.pmod_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(pmod_sptr self, std::string name)"""
        return _isl_swig.pmod_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(pmod_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _isl_swig.pmod_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(pmod_sptr self) -> swig_int_ptr"""
        return _isl_swig.pmod_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(pmod_sptr self) -> swig_int_ptr"""
        return _isl_swig.pmod_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(pmod_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _isl_swig.pmod_sptr_message_subscribers(self, which_port)

pmod_sptr_swigregister = _isl_swig.pmod_sptr_swigregister
pmod_sptr_swigregister(pmod_sptr)


pmod_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
pmod = pmod.make;

class oqpsk_coherrent_demod(object):
    """
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of isl::oqpsk_coherrent_demod.

    To avoid accidental use of raw pointers, isl::oqpsk_coherrent_demod's constructor is in a private implementation class. isl::oqpsk_coherrent_demod::make is the public interface for creating new instances.

    Args:
        samples_per_symbol : 
        taps : 
        opt_point : 
        pll : 
        pll_loop_bw : 
        pll_damping : 
        freq_max : 
        freq_min : 
        dttl : 
        dttl_loop_bw : 
        dttl_damping : 
        max_rate_deviation : 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(samples_per_symbol, taps, opt_point, pll, pll_loop_bw, pll_damping, freq_max, freq_min, dttl, dttl_loop_bw, dttl_damping, max_rate_deviation):
        """
        make(int samples_per_symbol, pmt_vector_cfloat taps, int opt_point, int pll, float pll_loop_bw, float pll_damping, float freq_max, float freq_min, int dttl, float dttl_loop_bw, float dttl_damping, float max_rate_deviation) -> oqpsk_coherrent_demod_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of isl::oqpsk_coherrent_demod.

        To avoid accidental use of raw pointers, isl::oqpsk_coherrent_demod's constructor is in a private implementation class. isl::oqpsk_coherrent_demod::make is the public interface for creating new instances.

        Args:
            samples_per_symbol : 
            taps : 
            opt_point : 
            pll : 
            pll_loop_bw : 
            pll_damping : 
            freq_max : 
            freq_min : 
            dttl : 
            dttl_loop_bw : 
            dttl_damping : 
            max_rate_deviation : 
        """
        return _isl_swig.oqpsk_coherrent_demod_make(samples_per_symbol, taps, opt_point, pll, pll_loop_bw, pll_damping, freq_max, freq_min, dttl, dttl_loop_bw, dttl_damping, max_rate_deviation)

    make = staticmethod(make)
    __swig_destroy__ = _isl_swig.delete_oqpsk_coherrent_demod
    __del__ = lambda self: None
oqpsk_coherrent_demod_swigregister = _isl_swig.oqpsk_coherrent_demod_swigregister
oqpsk_coherrent_demod_swigregister(oqpsk_coherrent_demod)

def oqpsk_coherrent_demod_make(samples_per_symbol, taps, opt_point, pll, pll_loop_bw, pll_damping, freq_max, freq_min, dttl, dttl_loop_bw, dttl_damping, max_rate_deviation):
    """
    oqpsk_coherrent_demod_make(int samples_per_symbol, pmt_vector_cfloat taps, int opt_point, int pll, float pll_loop_bw, float pll_damping, float freq_max, float freq_min, int dttl, float dttl_loop_bw, float dttl_damping, float max_rate_deviation) -> oqpsk_coherrent_demod_sptr

    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of isl::oqpsk_coherrent_demod.

    To avoid accidental use of raw pointers, isl::oqpsk_coherrent_demod's constructor is in a private implementation class. isl::oqpsk_coherrent_demod::make is the public interface for creating new instances.

    Args:
        samples_per_symbol : 
        taps : 
        opt_point : 
        pll : 
        pll_loop_bw : 
        pll_damping : 
        freq_max : 
        freq_min : 
        dttl : 
        dttl_loop_bw : 
        dttl_damping : 
        max_rate_deviation : 
    """
    return _isl_swig.oqpsk_coherrent_demod_make(samples_per_symbol, taps, opt_point, pll, pll_loop_bw, pll_damping, freq_max, freq_min, dttl, dttl_loop_bw, dttl_damping, max_rate_deviation)

class oqpsk_coherrent_demod_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::isl::oqpsk_coherrent_demod)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::isl::oqpsk_coherrent_demod)> self) -> oqpsk_coherrent_demod_sptr
        __init__(boost::shared_ptr<(gr::isl::oqpsk_coherrent_demod)> self, oqpsk_coherrent_demod p) -> oqpsk_coherrent_demod_sptr
        """
        this = _isl_swig.new_oqpsk_coherrent_demod_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(oqpsk_coherrent_demod_sptr self) -> oqpsk_coherrent_demod"""
        return _isl_swig.oqpsk_coherrent_demod_sptr___deref__(self)

    __swig_destroy__ = _isl_swig.delete_oqpsk_coherrent_demod_sptr
    __del__ = lambda self: None

    def make(self, samples_per_symbol, taps, opt_point, pll, pll_loop_bw, pll_damping, freq_max, freq_min, dttl, dttl_loop_bw, dttl_damping, max_rate_deviation):
        """
        make(oqpsk_coherrent_demod_sptr self, int samples_per_symbol, pmt_vector_cfloat taps, int opt_point, int pll, float pll_loop_bw, float pll_damping, float freq_max, float freq_min, int dttl, float dttl_loop_bw, float dttl_damping, float max_rate_deviation) -> oqpsk_coherrent_demod_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of isl::oqpsk_coherrent_demod.

        To avoid accidental use of raw pointers, isl::oqpsk_coherrent_demod's constructor is in a private implementation class. isl::oqpsk_coherrent_demod::make is the public interface for creating new instances.

        Args:
            samples_per_symbol : 
            taps : 
            opt_point : 
            pll : 
            pll_loop_bw : 
            pll_damping : 
            freq_max : 
            freq_min : 
            dttl : 
            dttl_loop_bw : 
            dttl_damping : 
            max_rate_deviation : 
        """
        return _isl_swig.oqpsk_coherrent_demod_sptr_make(self, samples_per_symbol, taps, opt_point, pll, pll_loop_bw, pll_damping, freq_max, freq_min, dttl, dttl_loop_bw, dttl_damping, max_rate_deviation)


    def history(self):
        """history(oqpsk_coherrent_demod_sptr self) -> unsigned int"""
        return _isl_swig.oqpsk_coherrent_demod_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(oqpsk_coherrent_demod_sptr self, int which, int delay)
        declare_sample_delay(oqpsk_coherrent_demod_sptr self, unsigned int delay)
        """
        return _isl_swig.oqpsk_coherrent_demod_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(oqpsk_coherrent_demod_sptr self, int which) -> unsigned int"""
        return _isl_swig.oqpsk_coherrent_demod_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(oqpsk_coherrent_demod_sptr self) -> int"""
        return _isl_swig.oqpsk_coherrent_demod_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(oqpsk_coherrent_demod_sptr self) -> double"""
        return _isl_swig.oqpsk_coherrent_demod_sptr_relative_rate(self)


    def start(self):
        """start(oqpsk_coherrent_demod_sptr self) -> bool"""
        return _isl_swig.oqpsk_coherrent_demod_sptr_start(self)


    def stop(self):
        """stop(oqpsk_coherrent_demod_sptr self) -> bool"""
        return _isl_swig.oqpsk_coherrent_demod_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(oqpsk_coherrent_demod_sptr self, unsigned int which_input) -> uint64_t"""
        return _isl_swig.oqpsk_coherrent_demod_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(oqpsk_coherrent_demod_sptr self, unsigned int which_output) -> uint64_t"""
        return _isl_swig.oqpsk_coherrent_demod_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(oqpsk_coherrent_demod_sptr self) -> int"""
        return _isl_swig.oqpsk_coherrent_demod_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(oqpsk_coherrent_demod_sptr self, int m)"""
        return _isl_swig.oqpsk_coherrent_demod_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(oqpsk_coherrent_demod_sptr self)"""
        return _isl_swig.oqpsk_coherrent_demod_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(oqpsk_coherrent_demod_sptr self) -> bool"""
        return _isl_swig.oqpsk_coherrent_demod_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(oqpsk_coherrent_demod_sptr self, int m)"""
        return _isl_swig.oqpsk_coherrent_demod_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(oqpsk_coherrent_demod_sptr self) -> int"""
        return _isl_swig.oqpsk_coherrent_demod_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(oqpsk_coherrent_demod_sptr self, int i) -> long"""
        return _isl_swig.oqpsk_coherrent_demod_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(oqpsk_coherrent_demod_sptr self, long max_output_buffer)
        set_max_output_buffer(oqpsk_coherrent_demod_sptr self, int port, long max_output_buffer)
        """
        return _isl_swig.oqpsk_coherrent_demod_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(oqpsk_coherrent_demod_sptr self, int i) -> long"""
        return _isl_swig.oqpsk_coherrent_demod_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(oqpsk_coherrent_demod_sptr self, long min_output_buffer)
        set_min_output_buffer(oqpsk_coherrent_demod_sptr self, int port, long min_output_buffer)
        """
        return _isl_swig.oqpsk_coherrent_demod_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(oqpsk_coherrent_demod_sptr self) -> float"""
        return _isl_swig.oqpsk_coherrent_demod_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(oqpsk_coherrent_demod_sptr self) -> float"""
        return _isl_swig.oqpsk_coherrent_demod_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(oqpsk_coherrent_demod_sptr self) -> float"""
        return _isl_swig.oqpsk_coherrent_demod_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(oqpsk_coherrent_demod_sptr self) -> float"""
        return _isl_swig.oqpsk_coherrent_demod_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(oqpsk_coherrent_demod_sptr self) -> float"""
        return _isl_swig.oqpsk_coherrent_demod_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(oqpsk_coherrent_demod_sptr self) -> float"""
        return _isl_swig.oqpsk_coherrent_demod_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(oqpsk_coherrent_demod_sptr self, int which) -> float
        pc_input_buffers_full(oqpsk_coherrent_demod_sptr self) -> pmt_vector_float
        """
        return _isl_swig.oqpsk_coherrent_demod_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(oqpsk_coherrent_demod_sptr self, int which) -> float
        pc_input_buffers_full_avg(oqpsk_coherrent_demod_sptr self) -> pmt_vector_float
        """
        return _isl_swig.oqpsk_coherrent_demod_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(oqpsk_coherrent_demod_sptr self, int which) -> float
        pc_input_buffers_full_var(oqpsk_coherrent_demod_sptr self) -> pmt_vector_float
        """
        return _isl_swig.oqpsk_coherrent_demod_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(oqpsk_coherrent_demod_sptr self, int which) -> float
        pc_output_buffers_full(oqpsk_coherrent_demod_sptr self) -> pmt_vector_float
        """
        return _isl_swig.oqpsk_coherrent_demod_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(oqpsk_coherrent_demod_sptr self, int which) -> float
        pc_output_buffers_full_avg(oqpsk_coherrent_demod_sptr self) -> pmt_vector_float
        """
        return _isl_swig.oqpsk_coherrent_demod_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(oqpsk_coherrent_demod_sptr self, int which) -> float
        pc_output_buffers_full_var(oqpsk_coherrent_demod_sptr self) -> pmt_vector_float
        """
        return _isl_swig.oqpsk_coherrent_demod_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(oqpsk_coherrent_demod_sptr self) -> float"""
        return _isl_swig.oqpsk_coherrent_demod_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(oqpsk_coherrent_demod_sptr self) -> float"""
        return _isl_swig.oqpsk_coherrent_demod_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(oqpsk_coherrent_demod_sptr self) -> float"""
        return _isl_swig.oqpsk_coherrent_demod_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(oqpsk_coherrent_demod_sptr self) -> float"""
        return _isl_swig.oqpsk_coherrent_demod_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(oqpsk_coherrent_demod_sptr self) -> float"""
        return _isl_swig.oqpsk_coherrent_demod_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(oqpsk_coherrent_demod_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _isl_swig.oqpsk_coherrent_demod_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(oqpsk_coherrent_demod_sptr self)"""
        return _isl_swig.oqpsk_coherrent_demod_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(oqpsk_coherrent_demod_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _isl_swig.oqpsk_coherrent_demod_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(oqpsk_coherrent_demod_sptr self) -> int"""
        return _isl_swig.oqpsk_coherrent_demod_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(oqpsk_coherrent_demod_sptr self) -> int"""
        return _isl_swig.oqpsk_coherrent_demod_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(oqpsk_coherrent_demod_sptr self, int priority) -> int"""
        return _isl_swig.oqpsk_coherrent_demod_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(oqpsk_coherrent_demod_sptr self) -> std::string"""
        return _isl_swig.oqpsk_coherrent_demod_sptr_name(self)


    def symbol_name(self):
        """symbol_name(oqpsk_coherrent_demod_sptr self) -> std::string"""
        return _isl_swig.oqpsk_coherrent_demod_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(oqpsk_coherrent_demod_sptr self) -> io_signature_sptr"""
        return _isl_swig.oqpsk_coherrent_demod_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(oqpsk_coherrent_demod_sptr self) -> io_signature_sptr"""
        return _isl_swig.oqpsk_coherrent_demod_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(oqpsk_coherrent_demod_sptr self) -> long"""
        return _isl_swig.oqpsk_coherrent_demod_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(oqpsk_coherrent_demod_sptr self) -> basic_block_sptr"""
        return _isl_swig.oqpsk_coherrent_demod_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(oqpsk_coherrent_demod_sptr self, int ninputs, int noutputs) -> bool"""
        return _isl_swig.oqpsk_coherrent_demod_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(oqpsk_coherrent_demod_sptr self) -> std::string"""
        return _isl_swig.oqpsk_coherrent_demod_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(oqpsk_coherrent_demod_sptr self, std::string name)"""
        return _isl_swig.oqpsk_coherrent_demod_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(oqpsk_coherrent_demod_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _isl_swig.oqpsk_coherrent_demod_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(oqpsk_coherrent_demod_sptr self) -> swig_int_ptr"""
        return _isl_swig.oqpsk_coherrent_demod_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(oqpsk_coherrent_demod_sptr self) -> swig_int_ptr"""
        return _isl_swig.oqpsk_coherrent_demod_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(oqpsk_coherrent_demod_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _isl_swig.oqpsk_coherrent_demod_sptr_message_subscribers(self, which_port)

oqpsk_coherrent_demod_sptr_swigregister = _isl_swig.oqpsk_coherrent_demod_sptr_swigregister
oqpsk_coherrent_demod_sptr_swigregister(oqpsk_coherrent_demod_sptr)


oqpsk_coherrent_demod_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
oqpsk_coherrent_demod = oqpsk_coherrent_demod.make;

class qpsk_decimator_cc(object):
    """
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of isl::qpsk_decimator_cc.

    To avoid accidental use of raw pointers, isl::qpsk_decimator_cc's constructor is in a private implementation class. isl::qpsk_decimator_cc::make is the public interface for creating new instances.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make():
        """
        make() -> qpsk_decimator_cc_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of isl::qpsk_decimator_cc.

        To avoid accidental use of raw pointers, isl::qpsk_decimator_cc's constructor is in a private implementation class. isl::qpsk_decimator_cc::make is the public interface for creating new instances.
        """
        return _isl_swig.qpsk_decimator_cc_make()

    make = staticmethod(make)
    __swig_destroy__ = _isl_swig.delete_qpsk_decimator_cc
    __del__ = lambda self: None
qpsk_decimator_cc_swigregister = _isl_swig.qpsk_decimator_cc_swigregister
qpsk_decimator_cc_swigregister(qpsk_decimator_cc)

def qpsk_decimator_cc_make():
    """
    qpsk_decimator_cc_make() -> qpsk_decimator_cc_sptr

    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of isl::qpsk_decimator_cc.

    To avoid accidental use of raw pointers, isl::qpsk_decimator_cc's constructor is in a private implementation class. isl::qpsk_decimator_cc::make is the public interface for creating new instances.
    """
    return _isl_swig.qpsk_decimator_cc_make()

class qpsk_decimator_cc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::isl::qpsk_decimator_cc)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::isl::qpsk_decimator_cc)> self) -> qpsk_decimator_cc_sptr
        __init__(boost::shared_ptr<(gr::isl::qpsk_decimator_cc)> self, qpsk_decimator_cc p) -> qpsk_decimator_cc_sptr
        """
        this = _isl_swig.new_qpsk_decimator_cc_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(qpsk_decimator_cc_sptr self) -> qpsk_decimator_cc"""
        return _isl_swig.qpsk_decimator_cc_sptr___deref__(self)

    __swig_destroy__ = _isl_swig.delete_qpsk_decimator_cc_sptr
    __del__ = lambda self: None

    def make(self):
        """
        make(qpsk_decimator_cc_sptr self) -> qpsk_decimator_cc_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of isl::qpsk_decimator_cc.

        To avoid accidental use of raw pointers, isl::qpsk_decimator_cc's constructor is in a private implementation class. isl::qpsk_decimator_cc::make is the public interface for creating new instances.
        """
        return _isl_swig.qpsk_decimator_cc_sptr_make(self)


    def history(self):
        """history(qpsk_decimator_cc_sptr self) -> unsigned int"""
        return _isl_swig.qpsk_decimator_cc_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(qpsk_decimator_cc_sptr self, int which, int delay)
        declare_sample_delay(qpsk_decimator_cc_sptr self, unsigned int delay)
        """
        return _isl_swig.qpsk_decimator_cc_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(qpsk_decimator_cc_sptr self, int which) -> unsigned int"""
        return _isl_swig.qpsk_decimator_cc_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(qpsk_decimator_cc_sptr self) -> int"""
        return _isl_swig.qpsk_decimator_cc_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(qpsk_decimator_cc_sptr self) -> double"""
        return _isl_swig.qpsk_decimator_cc_sptr_relative_rate(self)


    def start(self):
        """start(qpsk_decimator_cc_sptr self) -> bool"""
        return _isl_swig.qpsk_decimator_cc_sptr_start(self)


    def stop(self):
        """stop(qpsk_decimator_cc_sptr self) -> bool"""
        return _isl_swig.qpsk_decimator_cc_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(qpsk_decimator_cc_sptr self, unsigned int which_input) -> uint64_t"""
        return _isl_swig.qpsk_decimator_cc_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(qpsk_decimator_cc_sptr self, unsigned int which_output) -> uint64_t"""
        return _isl_swig.qpsk_decimator_cc_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(qpsk_decimator_cc_sptr self) -> int"""
        return _isl_swig.qpsk_decimator_cc_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(qpsk_decimator_cc_sptr self, int m)"""
        return _isl_swig.qpsk_decimator_cc_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(qpsk_decimator_cc_sptr self)"""
        return _isl_swig.qpsk_decimator_cc_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(qpsk_decimator_cc_sptr self) -> bool"""
        return _isl_swig.qpsk_decimator_cc_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(qpsk_decimator_cc_sptr self, int m)"""
        return _isl_swig.qpsk_decimator_cc_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(qpsk_decimator_cc_sptr self) -> int"""
        return _isl_swig.qpsk_decimator_cc_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(qpsk_decimator_cc_sptr self, int i) -> long"""
        return _isl_swig.qpsk_decimator_cc_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(qpsk_decimator_cc_sptr self, long max_output_buffer)
        set_max_output_buffer(qpsk_decimator_cc_sptr self, int port, long max_output_buffer)
        """
        return _isl_swig.qpsk_decimator_cc_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(qpsk_decimator_cc_sptr self, int i) -> long"""
        return _isl_swig.qpsk_decimator_cc_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(qpsk_decimator_cc_sptr self, long min_output_buffer)
        set_min_output_buffer(qpsk_decimator_cc_sptr self, int port, long min_output_buffer)
        """
        return _isl_swig.qpsk_decimator_cc_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(qpsk_decimator_cc_sptr self) -> float"""
        return _isl_swig.qpsk_decimator_cc_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(qpsk_decimator_cc_sptr self) -> float"""
        return _isl_swig.qpsk_decimator_cc_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(qpsk_decimator_cc_sptr self) -> float"""
        return _isl_swig.qpsk_decimator_cc_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(qpsk_decimator_cc_sptr self) -> float"""
        return _isl_swig.qpsk_decimator_cc_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(qpsk_decimator_cc_sptr self) -> float"""
        return _isl_swig.qpsk_decimator_cc_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(qpsk_decimator_cc_sptr self) -> float"""
        return _isl_swig.qpsk_decimator_cc_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(qpsk_decimator_cc_sptr self, int which) -> float
        pc_input_buffers_full(qpsk_decimator_cc_sptr self) -> pmt_vector_float
        """
        return _isl_swig.qpsk_decimator_cc_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(qpsk_decimator_cc_sptr self, int which) -> float
        pc_input_buffers_full_avg(qpsk_decimator_cc_sptr self) -> pmt_vector_float
        """
        return _isl_swig.qpsk_decimator_cc_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(qpsk_decimator_cc_sptr self, int which) -> float
        pc_input_buffers_full_var(qpsk_decimator_cc_sptr self) -> pmt_vector_float
        """
        return _isl_swig.qpsk_decimator_cc_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(qpsk_decimator_cc_sptr self, int which) -> float
        pc_output_buffers_full(qpsk_decimator_cc_sptr self) -> pmt_vector_float
        """
        return _isl_swig.qpsk_decimator_cc_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(qpsk_decimator_cc_sptr self, int which) -> float
        pc_output_buffers_full_avg(qpsk_decimator_cc_sptr self) -> pmt_vector_float
        """
        return _isl_swig.qpsk_decimator_cc_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(qpsk_decimator_cc_sptr self, int which) -> float
        pc_output_buffers_full_var(qpsk_decimator_cc_sptr self) -> pmt_vector_float
        """
        return _isl_swig.qpsk_decimator_cc_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(qpsk_decimator_cc_sptr self) -> float"""
        return _isl_swig.qpsk_decimator_cc_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(qpsk_decimator_cc_sptr self) -> float"""
        return _isl_swig.qpsk_decimator_cc_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(qpsk_decimator_cc_sptr self) -> float"""
        return _isl_swig.qpsk_decimator_cc_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(qpsk_decimator_cc_sptr self) -> float"""
        return _isl_swig.qpsk_decimator_cc_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(qpsk_decimator_cc_sptr self) -> float"""
        return _isl_swig.qpsk_decimator_cc_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(qpsk_decimator_cc_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _isl_swig.qpsk_decimator_cc_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(qpsk_decimator_cc_sptr self)"""
        return _isl_swig.qpsk_decimator_cc_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(qpsk_decimator_cc_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _isl_swig.qpsk_decimator_cc_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(qpsk_decimator_cc_sptr self) -> int"""
        return _isl_swig.qpsk_decimator_cc_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(qpsk_decimator_cc_sptr self) -> int"""
        return _isl_swig.qpsk_decimator_cc_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(qpsk_decimator_cc_sptr self, int priority) -> int"""
        return _isl_swig.qpsk_decimator_cc_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(qpsk_decimator_cc_sptr self) -> std::string"""
        return _isl_swig.qpsk_decimator_cc_sptr_name(self)


    def symbol_name(self):
        """symbol_name(qpsk_decimator_cc_sptr self) -> std::string"""
        return _isl_swig.qpsk_decimator_cc_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(qpsk_decimator_cc_sptr self) -> io_signature_sptr"""
        return _isl_swig.qpsk_decimator_cc_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(qpsk_decimator_cc_sptr self) -> io_signature_sptr"""
        return _isl_swig.qpsk_decimator_cc_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(qpsk_decimator_cc_sptr self) -> long"""
        return _isl_swig.qpsk_decimator_cc_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(qpsk_decimator_cc_sptr self) -> basic_block_sptr"""
        return _isl_swig.qpsk_decimator_cc_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(qpsk_decimator_cc_sptr self, int ninputs, int noutputs) -> bool"""
        return _isl_swig.qpsk_decimator_cc_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(qpsk_decimator_cc_sptr self) -> std::string"""
        return _isl_swig.qpsk_decimator_cc_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(qpsk_decimator_cc_sptr self, std::string name)"""
        return _isl_swig.qpsk_decimator_cc_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(qpsk_decimator_cc_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _isl_swig.qpsk_decimator_cc_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(qpsk_decimator_cc_sptr self) -> swig_int_ptr"""
        return _isl_swig.qpsk_decimator_cc_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(qpsk_decimator_cc_sptr self) -> swig_int_ptr"""
        return _isl_swig.qpsk_decimator_cc_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(qpsk_decimator_cc_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _isl_swig.qpsk_decimator_cc_sptr_message_subscribers(self, which_port)

qpsk_decimator_cc_sptr_swigregister = _isl_swig.qpsk_decimator_cc_sptr_swigregister
qpsk_decimator_cc_sptr_swigregister(qpsk_decimator_cc_sptr)


qpsk_decimator_cc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
qpsk_decimator_cc = qpsk_decimator_cc.make;



